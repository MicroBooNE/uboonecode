#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "mccheatermodules.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "clustermodules.fcl"
#include "trackfindermodules_microboone.fcl"
#include "calorimetry_microboone.fcl"
#include "analysistreemodule.fcl"
#include "filters.fcl"

#
# This fcl file begins by running single particles.
# It then runs a series of producers and one analyzer. It runs the evts through a 
# filter looking for primary K+'s and outputs those events to one file, while 
# writing every single event to another file.
#

## Get setup: git/mrb, make a feature branch from which to push/pull
## what's in what repository, pointers to documentation

## MC generation steps: gen+detsim/optsim (+backtracker?)
## Recon steps: Hits, Clusters, ...
## MC neutrons
## Add clusterer, trackers, analysisexample, analysistree
## Discuss filters.
## Event display, eventdump.fcl, ROOT session

## C++: EDProducer, EDAnalyzer, ... (FuzzyCluster as an example)
##   Associations-to-hits: making them, then getting them back

process_name: LArSoftYaleDemo

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "neutronsYale_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}

services.user.LArFFT.FFTOption: "" 

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:  4000
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
   generator: @local::microboone_singlep
   largeant:  @local::microboone_largeant	  
   daq:       @local::microboone_simwire       
   backtrack: @local::standard_backtrackerloader
   caldata:   @local::microboone_calwire
   gaushit:   @local::microboone_gaushitfinder
   fuzzy:     @local::microboone_fuzzycluster
   spacepointfinder: @local::microboone_spacepoint_finder
   trackkalsps:  @local::microboone_kalman
   trackkalspscalo:     @local::microboone_calomc

   rns: { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   analysistree:   @local::microboone_analysistree
   largana:        @local::microboone_largeantana

# This one is defined on-the-fly
   analysisexample: 
    {
      # The "module_type" tells us which module to run. The name here
      # matches the name supplied to DEFINE_ART_MODULE near the end of
      # AnalysisExample_module.cc.

      module_type:     "AnalysisExample"

      # The input parameters for our AnalysisExample module. Compare
      # the names you see here with the reconfigure method in
      # AnalysisExample.cxx. You will want to add/remove/rename the
      # example parameters below to suit your task.

      # If you are reading any objects created by the simulation, then
      # don't change the value of this parameter. This is the name of
      # the 'producer' that ran the simulation module in a previous
      # job. An example of a job file that runs the simulation is
      # ${LARSIM_DIR}/job/prodsingle.fcl; look for "largeant:". It's
      # unlikely that anyone would change the name of this producer.

      SimulationLabel: "largeant"

      # Hits can be created by more than one module in
      # ${LARRECO_DIR}/source/HitFinder. For this example, I picked
      # the one that's usually run first.

      HitLabel:        "gaushit"

      # The same for clusters:

      ClusterLabel:    "fuzzy"

      # In this example, which primary particle(s) we'll focus on in an event.
      # PDG code 13 = mu-.
      PDGcode:          2212

      # dx used for the dE/dx calculation; units are cm. 
      BinSize:          0.3
    }

 } 

 filters : 
{
    selectMode1: {
     module_type: FilterPrimaryPDG
     GeantModuleLabel: "largeant"
     PrimaryParticles: [ 2112 ] # find one of these primaries. 2112 == neutrons
    }
}

 #define the producer and filter modules for this path, order matters, 

 #simulate: [ generator, largeant, daq, backtrack, caldata, gaushit, hitcheat, apahit, rns ] 

  mode0: [ generator, largeant, daq, backtrack, caldata, gaushit, gaushit, fuzzy, spacepointfinder, trackkalsps, trackkalspscalo, rns ] 
  mode1: [ generator, largeant, daq, backtrack, caldata, gaushit, gaushit, fuzzy, spacepointfinder, trackkalsps, trackkalspscalo, rns, selectMode1 ] # 
 
 larana: [ largana, analysistree, analysisexample]

 #define the output stream, there could be more than one if using filters 
 #stream1:  [ out1 ]
 stream:  [ out1, out2 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
# trigger_paths: [simulate] 
 trigger_paths: [ mode0, mode1] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
# end_paths:     [larana, stream1] 
 end_paths:     [larana, stream] 
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "neutronsYale.root" #default file name, can override from command line with -o or --output
#   SelectEvents: { SelectEvents: [ mode0 ] }
 }
  out2: {
   module_type: RootOutput
   fileName: "neutronsYale.protons.root"
   SelectEvents: { SelectEvents: [ mode1 ] }
  }

}

physics.producers.generator.fseed: [ 314159 ]
physics.producers.generator.PDG: [ 2112 ]
physics.producers.generator.P0: [ 0.4 ]
physics.producers.generator.SigmaP: [ 0.3 ]
physics.producers.generator.X0: [ 125. ]
physics.producers.generator.SigmaThetaXZ: [ 25. ]
physics.producers.generator.SigmaThetaYZ: [ 25. ]
#physics.producers.largeant.DumpParticleList: true
physics.producers.spacepointfinder.HitsModuleLabel: "gaushit"
physics.producers.spacepointfinder.ClusterModuleLabel: "fuzzy"
physics.producers.fuzzy.HitsModuleLabel: "gaushit"

physics.producers.trackkalspscalo.TrackModuleLabel:             "trackkalsps"
physics.producers.trackkalspscalo.SpacePointModuleLabel:        "spacepointfinder"

physics.analyzers.analysistree.HitsModuleLabel:                 "gaushit"
physics.analyzers.analysistree.TrackModuleLabel:                ["trackkalsps"]
physics.analyzers.analysistree.CalorimetryModuleLabel:          ["trackkalspscalo"]
physics.analyzers.analysistree.GenieGenModuleLabel:             "generator"
physics.analyzers.analysistree.POTModuleLabel:                  "generator"
