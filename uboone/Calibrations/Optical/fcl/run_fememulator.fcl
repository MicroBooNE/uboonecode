#include "geometry_microboone.fcl"
#include "detectorclocks_microboone.fcl"
#include "pmtconfig_microboone.fcl"
#include "databaseutil_microboone.fcl"
#include "opcalibration_microboone.fcl"
#include "fememulator_microboone.fcl"

process_name: FEMemulator
services:
{
  TFileService: { fileName: "FEMemulator.root" }
  TimeTracker:  {}
  ExptGeoHelperInterface: @local::microboone_geometry_helper
  Geometry:               @local::microboone_geo
  DetectorClocksService:            @local::microboone_detectorclocks
  UBOpReadoutMap:         @local::microboone_opreadoutmap
}


# Database settings
services.DatabaseUtil.DBHostName:    "fnalpgsdev.fnal.gov"
services.DatabaseUtil.DBName:        "uboonedaq_dev"
services.DatabaseUtil.DBUser:        "uboonedaq_web"
services.DatabaseUtil.Port:          5436
services.DatabaseUtil.PassFileName:  "uboonedb_passwd"  # name of password file. searched for using env var FW_SEARCH_PATH
services.DatabaseUtil.ToughErrorTreatment: true
services.DatabaseUtil.ShouldConnect: false
services.DatabaseUtil.TableName: "main_run"

services.DetectorClocksService.TrigModuleName: "daq"


outputs:
{
}

physics:
{
  producers:
  {
  }

  analyzers:
  {
        femsoft: @local::microboone_fememulator
  }

 produceIt: []
 analyzeIt: [femsoft]

 #define the output stream, there could be more than one if using filters
 stream1:  []

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: []

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt]
}



