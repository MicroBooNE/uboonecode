#include "services_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "particleid_microboone.fcl"
#include "filters.fcl"
#include "signalservices_microboone.fcl"
#include "caldata_microboone.fcl"
#include "trackfindermodules_microboone.fcl"
#include "calorimetry_microboone.fcl"
#include "showerfindermodules.fcl"
#include "opticaldetectormodules.fcl"
#include "vertexfindermodules.fcl"
#include "triggeralgo_service.fcl"
#include "photpropservices_microboone.fcl"


process_name: diffusion

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "diffusion_tree.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::microboone_services
  message:      @local::standard_info
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "diffusion.root"    #default file name, can override from command line with -o or --output
   fastCloning: false
 } 
}

physics:
{
 producers:{
  trackkalmanhitcalo:  @local::microboone_calomc
  trackkalmanhitpid:  @local::microboone_chi2pid
  }
 filters:  {} 
 analyzers:{
   Diffusion:
   {
   module_type: "Diffusion"
 }
 }
 
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 #reco: [trackkalmanhitcalo,trackkalmanhitpid]
 ana:  [ Diffusion ]
 #ana: []
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ stream1, ana ] 
 end_paths:     [  ana ] 
}

# define the list of LArSoft modules to run through the simulate path

#physics.analyzers.diffusion:  @local::microboone_diffusion

physics.producers.calo:       @local::microboone_calomc
physics.producers.trackkalmanhitcalo.TrackModuleLabel:      "trackkalmanhit"

physics.producers.trackkalmanhitpid.TrackModuleLabel:       "trackkalmanhit"
physics.producers.trackkalmanhitpid.CalorimetryModuleLabel: "trackkalmanhitcalo"

physics.analyzers.Diffusion.DigitModuleLabel:        "daq"
#in the case of linecluster of cccluster, use "linecluster or cccluster" as hit modulelabel
#in the case of gaushit, you can just use gaushit
physics.analyzers.Diffusion.HitsModuleLabel:         "linecluster"
physics.analyzers.Diffusion.LArGeantModuleLabel:     "largeant"
physics.analyzers.Diffusion.GenieGenModuleLabel:     "generator"
physics.analyzers.Diffusion.TrackModuleLabel:        "trackkalmanhit"
physics.analyzers.Diffusion.POTModuleLabel:          "generator"
physics.analyzers.Diffusion.CalorimetryModuleLabel:  "trackkalmanhitcalo"
physics.analyzers.Diffusion.ParticleIDModuleLabel:   "trackkalmanhitpid"
physics.analyzers.Diffusion.ClusterModuleLabel:   "linecluster"
physics.analyzers.Diffusion.SaveCaloInfo: "false"
physics.analyzers.Diffusion.SaveTrackInfo: "false"
physics.analyzers.Diffusion.SaveClusterInfo: "true"
physics.analyzers.Diffusion.SaveClusterHitInfo: "true"
physics.analyzers.Diffusion.G4minE:   "0.01"


