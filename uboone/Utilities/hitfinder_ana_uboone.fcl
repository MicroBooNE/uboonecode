#include "services_microboone.fcl"
#include "tinyhitfinderana_microboone.fcl"
#include "mccheatermodules.fcl"

process_name: hitTTree

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco2D_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::microboone_message_services_prod_debug
#  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_services
}
services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.PhotonVisibilityService: @local::microboone_photonvisibilityservice
services.DatabaseUtil.ShouldConnect: false

#services.FileCatalogMetadataExtras:  @local::microboone_file_catalog
#services.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
#                                                    "fileFormat", "root",
#                                                    "fclName",    "standard_reco_uboone_2D.fcl",
#                                                    "fclVersion", "v1_5",
#                                                    "ubProjectStage",   "reco2D",
#                                                    "ubProjectVersion", "v1_3" ]
#services.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_reco2D.root"
#services.BackTracker: @local::microboone_backtracker

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }
#  backt :                 @local::standard_backtrackerloader
 }
 analyzers:
 {
  hfa:      @local::microboone_tinyhitfinderana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns ] #backt, rns ]
 ana: [ hfa ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ reco ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ] #, stream1 ]   # no output ART-ROOT file
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco_uboone_2D.root"
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
 }
}

physics.analyzers.hfa.HitsModuleLabel: "gaushit"
#services.FileCatalogMetadataExtras.RenameTemplate: '' 
