#include "job/services.fcl"
#include "job/caldata.fcl"
#include "job/hitfindermodules.fcl"
#include "job/clustermodules.fcl"
#include "job/trackfindermodules.fcl"
#include "job/opticaldetectormodules.fcl"

process_name: OpRecoFlash

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "opreco_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_services 	     
}

services.user.LArFFT: ""
services.user.BackTracker: ""

services.user.OpDigiProperties: @local::microboone_opdigiproperties


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  caldata:        @local::microboone_calwire	    
  ffthit:         @local::microboone_hitfinder	    
  dbcluster:      @local::microboone_dbcluster	    
  ophit:          @local::microboone_ophitfinder
  opflash:        @local::microboone_opflashfinder 
  opdigi:         @local::microboone_opdigi
 }
 


 analyzers:
 {
  dbclusterana: @local::microboone_dbclusterana
  opdigiana: @local::microboone_opdigiana 
  ophitana: @local::microboone_ophitana 
  opflashana: @local::microboone_opflashana 
  pmtresponse: @local::microboone_simphotoncounter
 } 



 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ ophit, opflash] 
 ana:  [ opdigiana, ophitana, opflashana ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana, stream1]  
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "optical_reco_uboone.root" #default file name, can override from command line with -o or --output
 }
}

 
