#include "services_microboone_simulation.fcl"
#include "toyoneshowergen.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"

process_name: ToyOneShowerGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gen_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
}

physics:
{
 producers:
 {
   oneshower:    @local::toyoneshowergen
   largeant:     @local::microboone_largeant	  
   daq:          @local::microboone_simwire  
 }
 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ oneshower, largeant, daq ]
 analyzeIt:  []
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gen.root" #default file name, can override from command line with -o or --output
   compressionLevel: 1
 }
}

services.user.DetectorProperties.NumberTimeSamples: 3200
services.user.DetectorProperties.ReadOutWindowSize: 3200

services.user.TimeService.G4RefTime: 0
services.user.TimeService.TriggerOffsetTPC: 0
services.user.TimeService.DefaultTrigTime: 0
services.user.TimeService.DefaultBeamTime: 0






