#include "services_microboone_simulation.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"

BEGIN_PROLOG

standard_mcshowerrecopart:
{
    DebugMode:   true
}

standard_mcshowerrecoedep:
{
    DebugMode:  false
    SaveMCHit:  true
}

standard_mcshowerrecoalg:
{
    DebugMode:  false
    G4ModName:        "largeant"
    MinShowerEnergy:  0
    MinNumDaughters:  1
    MCShowerRecoEdep: @local::standard_mcshowerrecoedep
    MCShowerRecoPart: @local::standard_mcshowerrecopart
}

standard_mcshowerfinder:
{
  module_type:            "MCShowerFinder"
  MCShowerRecoAlg:        @local::standard_mcshowerrecoalg
}

toyoneshowergen:
{
  module_type: "ToyOneShowerGen"

  PDGCode: 11
  Mass:    0.000511
  Time:    0.0

  EnergyShapeFormula:    "TMath::Landau(x,[0],[1],0)"
  EnergyLowerBound:      0.1
  EnergyUpperBound:      1.0
  EnergyShapeParameters: [ 0.3, 0.1 ]

  ThetaShapeFormula:    "TMath::Landau(x,[0],[1],0)"
  ThetaLowerBound:      0.0
  ThetaUpperBound:      3.14159
  ThetaShapeParameters: [ 0.5, 0.2 ]
}

END_PROLOG


process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gen_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one 
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_dark_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   2        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator:    @local::microboone_singlep
   #generator:    @local::toyoneshowergen
   largeant:     @local::microboone_largeant
   mcshower:     @local::standard_mcshowerfinder
   daq:          @local::microboone_simwire  
 }
 
 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, mcshower, daq ]
 analyzeIt:  []
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gen.root" #default file name, can override from command line with -o or --output
   compressionLevel: 1
 }
}

# enable this custom physics list

services.user.DetectorProperties.NumberTimeSamples: 3200
services.user.DetectorProperties.ReadOutWindowSize: 3200

services.user.TimeService.G4RefTime: 0
services.user.TimeService.TriggerOffsetTPC: 0
services.user.TimeService.DefaultTrigTime: 0
services.user.TimeService.DefaultBeamTime: 0

physics.producers.generator.PDG: [ 13 ]
physics.producers.generator.AngleDist:    0
physics.producers.generator.Theta0YZ:     [ 0 ]
physics.producers.generator.SigmaThetaYZ: [ .0 ]
physics.producers.generator.Theta0XZ:     [ 0.0 ]
physics.producers.generator.SigmaThetaXZ: [ .0 ]
physics.producers.generator.X0: [ 128.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ 100.0 ]
physics.producers.generator.SigmaX: [ 0.0 ]
physics.producers.generator.SigmaY: [ 0.0 ]
physics.producers.generator.SigmaZ: [ 0.0 ]
physics.producers.generator.T0: [ 0.0 ]
physics.producers.generator.P0: [ 1.0 ]
physics.producers.generator.SigmaP: [ 0.0 ]
physics.producers.generator.PDist: 0
