
#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "mccheatermodules.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"

process_name: TestOptSim

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "test_optsim_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_simulation_services
#  message:      @local::standard_warning
}


#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1          # Number of events to create
}

services.DetectorClocksService:             @local::microboone_detectorclocks
services.UBChConfig:              @local::microboone_optical_ch_config
# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }
   optdigitizer:   @local::microboone_optical_adc_sim
   optfem:         @local::microboone_optical_fem_sim
   triggersim:     @local::ubtrigger_standard
   optreadout:     @local::microboone_optical_dram_readout_sim
 }

 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [rns, optdigitizer, optfem, triggersim, optreadout]
 analyzeIt:  [ ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "test_optsim.root" #default file name, can override from command line with -o or --output
 }
}

physics.producers.optdigitizer.BeamModName: []

