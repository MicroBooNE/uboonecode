#include "services_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"

process_name: Detsim

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "detsim_hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
#  FileCatalogMetadata:  @local::art_file_catalog_mc
#  @table::microboone_optical_simulation_services_1window
  @table::microboone_simulation_services
  message:      @local::standard_warning
}
#services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"
#Reduce charge to represent a more realistic gain (14mV/fC->4.7mV/fC) - Andrzej
#services.SignalShapingServiceMicroBooNE.ColFieldRespAmp:  0.0119     #scaled by 14/4.7 
#services.SignalShapingServiceMicroBooNE.IndFieldRespAmp:  0.00604

# Set the time at which pmt readout sim's discrete clock counting starts/ends [us
#services.OpDigiProperties.TimeBegin:     -3200
#services.OpDigiProperties.TimeEnd:        3200

#services.FileCatalogMetadataExtras:  @local::microboone_file_catalog
#services.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
#                                                    "fileFormat", "root",
#                                                    "runType",    "physics",
#                                                    "fclName",    "standard_detsim_uboone.fcl",
#                                                    "fclVersion", "v1_5",
#                                                    "ubProjectStage",   "detsim",
#                                                    "ubProjectVersion", "v1_3" ]

#services.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_detsim.root"


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
#   optdigitizer: @local::microboone_optdetdigitizer
#   optreadout:   @local::microboone_optical_readout
   daq:       @local::microboone_simwire
   rns:       { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   daqana:    @local::microboone_simwireana
 }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ daq, rns ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 analyzeme: [ daqana ]
 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ analyzeme, stream1 ]  
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_detsim_uboone.root"
#   dataTier:    "detector-simulated"
 }
}
