#include "services_microboone.fcl"
#include "genie_microboone.fcl" 
#include "largeantmodules_microboone.fcl"
#include "singles_microboone.fcl"
#include "caldata_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "mccheatermodules.fcl"
#include "opticaldetectormodules.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "mchitmodules.fcl" 
#include "flashermc_microboone.fcl"

BEGIN_PROLOG

lowgain_opflash:
{
   module_type:     "OpFlashFinder"
   GenModule:       "generator"
   InputModule:     "pmtreadout"
   InputLabels:     [ "OpdetBeamLowGain" ]
   ChannelMapMode:   0
   BinWidth:         1   # us | Pulse finding parameters
   FlashThreshold:   2   # PE
   HitThreshold:     0.2 # PE
   WidthTolerance:   0.5 # unitless
   TrigCoinc:        2.5 # in microseconds!
   AreaToPE:         false # Use area to calculate number of PEs
   SPEArea:          1330  # If AreaToPE is true, this number is used as single PE area (in ADC counts)
   reco_man:         @local::standard_preco_manager
   algo_threshold:   @local::standard_algo_threshold
}

highgain_opflash:
{
   module_type:     "OpFlashFinder"
   GenModule:       "generator"
   InputModule:     "pmtreadout"
   InputLabels:     [ "OpdetBeamHighGain" ]
   ChannelMapMode:   0
   BinWidth:         1   # us | Pulse finding parameters
   FlashThreshold:   2   # PE
   HitThreshold:     0.2 # PE
   WidthTolerance:   0.5 # unitless
   TrigCoinc:        2.5 # in microseconds!
   AreaToPE:         false # Use area to calculate number of PEs
   SPEArea:          1330  # If AreaToPE is true, this number is used as single PE area (in ADC counts)
   reco_man:         @local::standard_preco_manager
   algo_threshold:   @local::standard_algo_threshold
}

END_PROLOG

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_full_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on` each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }
   largeant:     @local::microboone_largeant
   optdigitizer: @local::microboone_flasher_sim
   optfem:       @local::microboone_optical_fem_sim
   triggersim:   @local::ubtrigger_standard
   pmtreadout:   @local::microboone_optical_dram_readout_sim
   daq:          @local::microboone_simwire

   opflashhigh:  @local::highgain_opflash
   opflashlow:  @local::lowgain_opflash
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, largeant, optdigitizer, optfem, triggersim, pmtreadout, daq ]
 analyzeIt:  [ ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

# We need to tell various modules where the beam gate is stored.
physics.producers.optfem.BeamGateModule: "optdigitizer"
physics.producers.optfem.VerboseHistograms: false
physics.producers.triggersim.BeamModName: ["optdigitizer"]

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "flasher_mc_events.root" #default file name, can override from command line with -o or --output
   compressionLevel: 3
 }
}

