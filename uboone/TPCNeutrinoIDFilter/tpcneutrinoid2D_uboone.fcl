#include "services_microboone.fcl"
#include "cluster_microboone.fcl"
#include "filters.fcl"
#include "signalservices_microboone.fcl"
#include "trackfindermodules_microboone.fcl"
#include "vertexfindermodules.fcl"
#include "tpcneutrinoidfiltermodule_microboone.fcl"
#include "tpcneutrinoidfilter_microboone.fcl"

process_name: TPCNeutrinoIDFilter2D

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "tpcneutrinoid2D.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::microboone_services
  message:      @local::standard_info
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_nuid2D.root"
   fastCloning: false
   SelectEvents: [ reco ]
 } 
}

physics:
{
 producers:     { cluster2D :        @local::microboone_tpcNeutrinoID
                }

 filters:       { tpcneutrinoidfilter : @local::microboone_tpcneutrinoidfilter } 

 analyzers:     { }

 reco:          [ cluster2D, tpcneutrinoidfilter ]
 
 stream1:       [ out1 ]

 trigger_paths: [ reco ]

 end_paths:     [ stream1 ] 
}

# define the list of LArSoft modules to run through the simulate path

physics.producers.cluster2D.NeutrinoIDAlgName:             "Cluster2DNuAlg"

physics.producers.cluster2D.TPCCluster2DNuAlg.ClusterModuleLabel:   "cccluster"
physics.producers.cluster2D.TPCCluster2DNuAlg.CosmicModuleLabel:    "ccclustertag"

physics.filters.tpcneutrinoidfilter.Cluster2DCosmicProducerLabel: "ccclustertag"
physics.filters.tpcneutrinoidfilter.Cluster2DCosmicClusterAssns:  "cluster2D"
