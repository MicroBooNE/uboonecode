#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices_microboone.fcl"
#include "correct_saturation.fcl"
#include "caldata_microboone.fcl" 
#include "time_memory_tracker_microboone.fcl"
#include "photpropservices_microboone.fcl"

#include "T0RecoAnodeCathodePiercing.fcl"
#include "t0trackcalib.fcl"
#include "ubflashfinder.fcl"
#include "mucst0finder.fcl"

process_name: T0trackcalibMuCSACPT

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
    TFileService: { fileName: "flashmatching_t0calib_mucs_acpt_run183_beamdisc_OneToOne.root" }
    TimeTracker:             @local::microboone_time_tracker
    MemoryTracker:           @local::microboone_memory_tracker
    RandomNumberGenerator:   {} #ART native random number generator                                                                                          
    message:                 @local::microboone_message_services_prod_debug
    FileCatalogMetadata:  @local::art_file_catalog_mc
    #LLMetaMaker: {Enable: true}
    @table::microboone_simulation_services
    DetectorProperties:             @local::microboone_detproperties
}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.DetectorClocksService.TrigModuleName:               "daq"

services.Geometry.ForceUseFCLOnly: true

services.FileCatalogMetadata.applicationVersion: "develop"
services.FileCatalogMetadata.fileType: "data"
services.FileCatalogMetadata.runType: "physics"
services.FileCatalogMetadataMicroBooNE: {
  FCLName: "litemucs.fcl"
  FCLVersion: "develop"
  ProjectName: "LiteMC"
  ProjectStage: "LiteMaker"
  ProjectVersion: "develop"
}

services.TimeTracker.printSummary: false
services.TimeTracker.dbOutput: {}

services.MemoryTracker.printSummaries: []
services.MemoryTracker.includeMallocInfo: false
services.MemoryTracker.dbOutput.filename: ""

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
  inputCommands: ["keep *_*_*_*", "drop raw::OpDetWaveforms_DataApr2016RecoStage1_saturation_*"]

}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

  ### opFlash generation with SPE and recoPE correction
  saturation:        @local::correct_saturation
  ophitSatBeam:      @local::microboone_ophit_saturation_beam
  ophitSatCosmic:    @local::microboone_ophit_saturation_cosmic
  opflashSatBeam:    @local::microboone_opflash_saturation_beam
  opflashSatCosmic:  @local::microboone_opflash_saturation_cosmic
  simpleFlashBeam:   @local::UBFlashBeam
  simpleFlashCosmic: @local::UBFlashCosmic

  ### flash finders
  T0TrackTaggerpandoraCosmic : @local::T0RecoAnodeCathodePiercing 

 }
 analyzers:
 {
  ### FlashMatching
  t0trackcalib : @local::T0TrackCalib
 }

 #reco: [ rns, ophit, opflash, simpleFlash, opflashfilter ]
 reco: [ rns, saturation, ophitSatBeam, ophitSatCosmic, opflashSatBeam, opflashSatCosmic, 
         simpleFlashBeam, simpleFlashCosmic, 
         T0TrackTaggerpandoraCosmic ]
 ana: [ t0trackcalib ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1,ana]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "T0Reco.root"
   dataTier:    "reco"
   compressionLevel: 1
   #outputCommands: [
  outputCommands: [
            "keep *_*_*_*",
            "keep recob::Track_*_pandoraCosmic_*",
            "drop raw::RawDigits_*_*_*",
            "drop recob::Cluster_*_*_*",
            "drop recob::EndPoint2D_*_*_*",
            "drop recob::Hit_*_*_*",
            "drop recob::Vertex_*_*_*",
            "drop recob::Wires_*_*_*",
            "drop recob::PFParticle_*_*_*",
            "drop recob::Wire_*_*_*",
            "drop raw::OpDetWaveform_*_*_*",
            "drop *_*_*_McRecoAprStage1",
            "drop *_*_*_DetSim"]
   }
}

physics.producers.T0TrackTaggerpandoraCosmic.TrackProducer: "pandoraCosmic"
physics.producers.T0TrackTaggerpandoraCosmic.FlashProducer: "simpleFlashBeam"
#physics.producers.T0TrackTaggerpandoraCosmic.FlashProducer: "simpleFlashCosmic"

physics.analyzers.t0trackcalib.TrackProducer              : "pandoraCosmic"
physics.analyzers.t0trackcalib.BeamOpFlashProducer        : "simpleFlashBeam"
physics.analyzers.t0trackcalib.CosmicOpFlashProducer      : "simpleFlashCosmic"
physics.analyzers.t0trackcalib.FlashVetoTimeStart         : -100000
physics.analyzers.t0trackcalib.FlashVetoTimeEnd           : 100000
physics.analyzers.t0trackcalib.GainCorrection             : [1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.]

physics.producers.saturation.verbose:                         false

### Here we include the file giving us run/data dependent overrides

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}


