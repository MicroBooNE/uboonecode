#include "services_microboone.fcl"
#include "detsimmodules.fcl"

process_name: SimWire

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "simwire_uboone.root"         }
  #scheduler:    { wantTracer: false wantSummary: true }
  #Timing:       {}
  #SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user: {}
}

services.user.ExptGeoHelperInterface: @local::microboone_geometry_helper
services.user.Geometry: @local::microboone_geo
services.user.LArPropertiesService: @local::microboone_properties            
services.user.LArFFT: @local::microboone_larfft
services.user.LArFFT.FFTOption: ""
services.user.DetectorPropertiesService: @local::microboone_detproperties
services.user.DatabaseUtil:       @local::microboone_database
services.user.DatabaseUtil.ShouldConnect: false

source:
{
  module_type: EmptyEvent
  maxEvents:   0       # Number of events to create
}

outputs:
{
}

physics:
{

 producers:
 {
  daq: @local::microboone_simwire
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ daq ] 

 #define the path for analyzer modules, order does not matter.
 #see lines starting physics.analyzers below
 ana:  [ ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simulate ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ]  
}
