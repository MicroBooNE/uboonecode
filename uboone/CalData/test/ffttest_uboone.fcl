#include "services_microboone.fcl"
#include "caldata.fcl"

process_name: FFTTest

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "caldata_test_uboone.root"         }
  #scheduler:    { wantTracer: false wantSummary: true }
  #TimeTracker:  {}
  #MemoryTracker:     { ignoreTotal: 1 } # default is one
  #RandomNumberGenerator: {} #ART native random number generator
}

#services.Geometry: @local::detector_geo
services.LArFFT: @local::microboone_larfft
services.LArFFT.FFTOption: ""
services.DetectorPropertiesService: @local::microboone_detproperties

source:
{
  module_type: EmptyEvent
  maxEvents:   0       # Number of events to create
}

outputs:
{
}

physics:
{

 analyzers:
 {
  ffttest: { module_type: "FFTTest" }
 }

 #define the path for analyzer modules, order does not matter.
 #see lines starting physics.analyzers below
 ana:  [ ffttest ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana]  
}

physics.analyzers.ffttest:
{
  module_type: "FFTTest"
  simwire_file: "simwire_uboone.root"
  calwire: @local::microboone_calwire
}
