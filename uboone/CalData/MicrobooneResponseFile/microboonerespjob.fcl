#include "job/services.fcl"
#include "job/microbooneresp.fcl"

process_name: MicrobooneResp

services:
{
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_warning
  user:         @local::microboone_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   1         # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   mkresp: @local::microboone_makeresp	       
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 
  simulate: [ mkresp ] 
 

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simulate ] 



 
}
 

