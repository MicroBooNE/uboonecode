#include "services_microboone.fcl"
#include "impulse.fcl"

process_name: ImpulseSim

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "impulse_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}
services.user.SignalShapingServiceMicroBooNE.ShapeTimeConst: [1.4,0.5]
services.user.SignalShapingServiceMicroBooNE.ASICGainInMVPerFC: 14
#services.user.SignalShapingServiceMicroBooNE.UseHistogramFieldShape: false

#services.user.DetectorProperties.NumberTimeSamples: 1200
#services.user.DetectorProperties.ReadOutWindowSize: 1200

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   2        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   simwire: @local::standard_rawdigitsim
 }
 
 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
# simulate: [ generator, largeant, daq, backtrack, caldata, ffthit, fuzzycluster]
 simulate: [ simwire ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "impulse.root" #default file name, can override from command line with -o or --output
 }
}

