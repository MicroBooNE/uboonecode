process_name: RawConvert
services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "daq_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         { }
}

#Start each new event with an empty event.
source:
{
#  Argoneut
#  module_type:               LArRawInputSource
#  fileNames:                 ["/argoneut/data/rundata/R850_D20100221_T102949"]
#  Short Bo
#  module_type:               LArRawInputSourceSB
#  fileNames:                 ["/afs/fnal.gov/files/data/LArTPC/d1/BoData2011/R269_D20111104_T172759"]
#  Long Bo
#  module_type:               LArRawInputSourceLB
#  fileNames:                 ["/afs/fnal.gov/files/data/LArTPC/d2/LongBoData2013/R034_D20120907_T101513"]
  module_type:		    LArRawInputSourceUBooNE
  #FILE YOU WANT TO SWIZZLE...
  fileNames:		    ["/path_to_file/raw_data.dat"]
  
  maxEvents:                -1       # Number of events to create
  huffmanDecode:            false
  beam_histograms:          [ "E:TOR101, 100, 0, 50", # output histograms for listed variables 
	                      "E:TORTGT, 100, 0, 50", # "device, NBINS, LOW, HIGH" 
	                      "E:TOR860, 100, 0, 5",
	                      "E:TOR875, 100, 0, 5" ]
}	

outputs:
{
 out1:
  {
   module_type: RootOutput
   fileName:    "MRT_Test_301_larsoft.root" #default file name, can override from command line with -o or --output
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 stream1:  [ out1 ] #could have multiple paths

 end_paths:     [stream1]  #end_path are things that do not modify art::Event, includes analyzers and output modules. all items here can be run simultaneously
}
