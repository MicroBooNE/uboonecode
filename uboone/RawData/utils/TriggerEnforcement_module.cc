////////////////////////////////////////////////////////////////////////
// Class:       TriggerEnforcement
// Module Type: filter
// File:        TriggerEnforcement_module.cc
//
// Generated at Wed Oct  7 12:33:08 2015 by Kazuhiro Terao using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "Utilities/TimeService.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

class TriggerEnforcement;

class TriggerEnforcement : public art::EDFilter {
public:
  explicit TriggerEnforcement(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TriggerEnforcement(TriggerEnforcement const &) = delete;
  TriggerEnforcement(TriggerEnforcement &&) = delete;
  TriggerEnforcement & operator = (TriggerEnforcement const &) = delete;
  TriggerEnforcement & operator = (TriggerEnforcement &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;


private:

  // Declare member data here.

};


TriggerEnforcement::TriggerEnforcement(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

bool TriggerEnforcement::filter(art::Event & e)
{
  ::art::ServiceHandle< util::TimeService > ts;
  std::cout<<"BEFORE: " <<ts->TriggerTime()<<std::endl;
  ts->preProcessEvent(e);
  std::cout<<"AFTER: " <<ts->TriggerTime()<<std::endl;
  // Implementation of required member function here.
  return true;
}

DEFINE_ART_MODULE(TriggerEnforcement)
