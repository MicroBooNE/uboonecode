////////////////////////////////////////////////////////////////////////
// Class:       AnodeCathodeTrackFilter
// Module Type: filter
// File:        AnodeCathodeTrackFilter_module.cc
//
// Generated at Sun Aug 21 22:09:38 2016 by Wesley Ketchum using artmod
// from cetpkgsupport v1_10_02.
//
// wketchum@fnal.gov
//
// Algorithm for quickly identifying anode-to-cathode tracks based on a
// simple pattern-matching approach.
//
// Input:  vector<recob::Hit>
// Output: true if anode-cathode track candidate in event (false if not)
// 
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

namespace pm {
  class AnodeCathodeTrackFilter;
}

class pm::AnodeCathodeTrackFilter : public art::EDFilter {
public:
  explicit AnodeCathodeTrackFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  AnodeCathodeTrackFilter(AnodeCathodeTrackFilter const &) = delete;
  AnodeCathodeTrackFilter(AnodeCathodeTrackFilter &&) = delete;
  AnodeCathodeTrackFilter & operator = (AnodeCathodeTrackFilter const &) = delete;
  AnodeCathodeTrackFilter & operator = (AnodeCathodeTrackFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;
  void beginJob() override;

private:

  // Declare member data here.

};


pm::AnodeCathodeTrackFilter::AnodeCathodeTrackFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

bool pm::AnodeCathodeTrackFilter::filter(art::Event & e)
{
  return true;
}

void pm::AnodeCathodeTrackFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void pm::AnodeCathodeTrackFilter::beginJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(pm::AnodeCathodeTrackFilter)
