#include "job/services.fcl"
#include "job/largeantmodules.fcl"
#include "job/singles.fcl"
#include "job/caldata.fcl"
#include "job/detsimmodules.fcl"
#include "job/mccheatermodules.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone_comp.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on` each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_singlep	  
   largeant:  @local::microboone_largeant	  
   daq:       @local::microboone_simwire       
   caldata:   @local::microboone_calwire
   backtrack: @local::standard_backtrackerloader
 }

 analyzers:
 {
   largana:   @local::microboone_largeantana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, daq, caldata, backtrack ] 
 analyzeIt:  [ largana ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_uboone_comp.root" #default file name, can override from command line with -o or --output
 }
}

physics.producers.generator.ParticleSelectionMode: 1
physics.producers.generator.PadOutVectors: "true"
physics.producers.generator.Theta0YZ: [ 0.001 ] # over-ride singles.fcl!!!
physics.producers.generator.PDG: [ 13, 13, 13, 13, 13, 13, 13, 13 ]
physics.producers.generator.SigmaThetaXZ: [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0  ]
physics.producers.generator.SigmaThetaYZ: [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]
physics.producers.generator.X0: [ 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0 ]
physics.producers.generator.Y0: [  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0 ]
physics.producers.generator.Z0: [ 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0 ]
physics.producers.generator.P0: [ 0.5, 1.0, 1.5, 2.0, 2.5, 4.0, 7.0, 10.0]

physics.producers.daq.CompressionType: "Huffman"
physics.producers.caldata.CompressionType: "Huffman"
