#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "opticaldetectorservices_microboone.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices_microboone.fcl"
#include "lightsource_microboone.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_full_services
#  @table::microboone_services
}
#services.BackTracker: @local::microboone_backtracker
services.OpDigiProperties: @local::microboone_opdigiproperties

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   5          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
#   generator:    @local::microboone_singlep
   generator:    @local::microboone_lightsource
   largeant:     @local::microboone_largeant
#   backtrack:    @local::standard_backtrackerloader
   optdigitizer: @local::microboone_optical_adc_sim
   optfem:       @local::microboone_optical_fem_sim
   triggersim:   @local::ubtrigger_dark_bnb
   optreadout:   @local::microboone_optical_dram_readout_sim
   ophit:        @local::microboone_ophit
   opflash:      @local::microboone_opflash
#   daq:          @local::microboone_simwire
 }

 analyzers:
 {
#   largana:   @local::microboone_largeantana
#   pmtresponse:  @local::microboone_simphotoncounter
   opflashana:       @local::standard_opflashana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 #simulate: [ generator, largeant, backtrack, optdigitizer, optfem, triggersim, optreadout, daq ]
 simulate: [ generator, largeant, optdigitizer, optfem, triggersim, optreadout, ophit, opflash ]
# analyzeIt:  [ largana ]
# analyzeIt:  [ pmtresponse, opflashana ]
 analyzeIt:  [ opflashana ]
# analyzeIt:  [ ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_uboone.root" #default file name, can override from command line with -o or --output
 }
}

# This section configures the light source

physics.producers.generator.UseCustomRegion:    true    # Use the voxel params from PhotonVisibilityService
physics.producers.generator.XSteps:             1
physics.producers.generator.YSteps:             1
physics.producers.generator.ZSteps:             1
physics.producers.generator.RegionMin:          [  49.995, 3.215, 446.495 ]
physics.producers.generator.RegionMax:          [  50.005, 3.220, 446.505 ]

# Keep defaults (loop over all voxels)
physics.producers.generator.FirstVoxel: 0
physics.producers.generator.LastVoxel:  -1

# Number of photons and T0 to generate them
physics.producers.generator.N:          30000
physics.producers.generator.T0:         800.0      # Central time for photon production

physics.producers.generator.FillTree: true

# Must use custom physics list to add optical info
services.LArG4Parameters.UseCustomPhysics: true
services.LArG4Parameters.EnabledPhysics:   [ "Em",
                                                  "Optical",
                                                  "SynchrotronAndGN",
                                                  "Ion",
                                                  "Hadron",
                                                  "Decay",
                                                  "HadronElastic",
                                                  "Stopping"]
                                                  #"NeutronTrackingCut" ]

# Simphotoncounter tree creation
#physics.analyzers.pmtresponse.MakeAllPhotonsTree: true
#physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: true
#physics.analyzers.pmtresponse.MakeOpDetsTree: true
#physics.analyzers.pmtresponse.MakeOpDetEventsTree: true

physics.analyzers.opflashana.MakePerFlashTree:        true
physics.analyzers.opflashana.MakePerOpHitTree:        true
physics.analyzers.opflashana.MakeFlashBreakdownTree:  true
