#include "services_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "wires_hist_uboone.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   daq:       @local::microboone_simwire
   caldata:    @local::microboone_calwire	    
   ffthit:     @local::microboone_hitfinder	    
 }



 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ daq, caldata, ffthit ] 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "wires_gen_uboone.root" #default file name, can override from command line with -o or --output
 }
}


physics.producers.daq.module_type:        "SimWire"
physics.producers.daq.DriftEModuleLabel:  "largeant"
#physics.producers.daq.SigType:            []#Signal Type: 'gauss' or 'pulse'
#physics.producers.daq.SigWidth:           []             #in time-ticks: signal width
#physics.producers.daq.SigAmp:             []          #in ADCs: signal amplitude
#physics.producers.daq.Pedestal:           0                      #in ADCs: signal pedestal value
#physics.producers.daq.NTicks:             3200                     #in time-ticks: length of pulse
#physics.producers.daq.SigTime:            []         #in time-ticks: when pulse will happen
#physics.producers.daq.NoiseFact:          0.00                     #Noise Scale to use with histogram
physics.producers.daq.CompressionType:    "none"                   #could also be none		
