#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"

process_name: MCShowerSampleGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gen_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   5        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator:    @local::microboone_singlep	  
   largeant:     @local::microboone_largeant	  
 }
 
 analyzers:
 {
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant ]
 analyzeIt:  []
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gen_11.root" #default file name, can override from command line with -o or --output
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
#services.user.LArProperties.ScintYield: 24000

# enable optical physics in LArG4
#services.user.LArG4Parameters.EnabledPhysics: [ "Em",
#                                                "FastOptical",
#                                                "SynchrotronAndGN",
 #                                               "Ion",
 #                                               "Hadron",
 #                                               "Decay",
 #                                               "HadronElastic",
 #                                               "Stopping",
 #                                               "NeutronTrackingCut" ]

# enable this custom physics list
#services.user.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
services.user.LArProperties.EnableCerenkovLight: false
services.user.LArG4Parameters.KeepEMShowerDaughters: true
services.user.LArG4Parameters.StoreTrajectories: true

physics.producers.generator.PDG: [ 13 ]

physics.producers.generator.AngleDist:    0
physics.producers.generator.Theta0YZ:     [ 0 ]
physics.producers.generator.SigmaThetaYZ: [ 0.0 ]

physics.producers.generator.Theta0XZ:     [ 0.0 ]
physics.producers.generator.SigmaThetaXZ: [ 0.0 ]

physics.producers.generator.X0: [ 50.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ -100.0 ]
physics.producers.generator.SigmaX: [ 0.0 ]
physics.producers.generator.SigmaY: [ 0.0 ]
physics.producers.generator.SigmaZ: [ 0.0 ]
physics.producers.generator.T0: [ 0.0 ]
physics.producers.generator.P0: [ 1.0 ]
physics.producers.generator.SigmaP: [ 0. ]
physics.producers.generator.PDist: 0




