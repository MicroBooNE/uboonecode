////////////////////////////////////////////////////////////////////////
// Class:       BeamAna
// Module Type: analyzer
// File:        BeamAna_module.cc
//
// Generated at Fri Oct 23 21:54:04 2015 by Zarko Pavlovic using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "larcoreobj/SummaryData/POTSummary.h"

#include <string>

class BeamAna;

class BeamAna : public art::EDAnalyzer {
public:
  explicit BeamAna(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  BeamAna(BeamAna const &) = delete;
  BeamAna(BeamAna &&) = delete;
  BeamAna & operator = (BeamAna const &) = delete;
  BeamAna & operator = (BeamAna &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginSubRun(art::SubRun const & sr) override;
  void endSubRun(art::SubRun const & sr) override;

private:

  // Declare member data here.

};


BeamAna::BeamAna(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void BeamAna::analyze(art::Event const & e)
{
  // Implementation of required member function here.
}

void BeamAna::beginSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void BeamAna::endSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
  std::vector<art::Handle<sumdata::POTSummary> > potSummaryHandle;
  sr.getManyByType(potSummaryHandle);
 
  for(auto const& potsumh : potSummaryHandle) {
    mf::LogInfo(__FUNCTION__) << "Tota POT "<<potsumh->totpot;
  }
}

DEFINE_ART_MODULE(BeamAna)
