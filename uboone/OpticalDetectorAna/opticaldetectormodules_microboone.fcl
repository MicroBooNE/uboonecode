#include "opticaldetectormodules.fcl"

BEGIN_PROLOG

microboone_simphotoncounter: @local::standard_simphotoncounter
microboone_opdigi:           @local::standard_opdigi
microboone_tracktimeassoc:   @local::standard_tracktimeassoc
microboone_algo_slidingwindow: @local::standard_algo_slidingwindow

microboone_opflash_lowgain:
{
   module_type:     "OpFlashFinder"
   GenModule:       "generator"
   InputModule:     "pmtreadout"
   InputLabels:     [ "" ]
   BinWidth:         1   # us | Pulse finding parameters
   FlashThreshold:   2   # PE
   HitThreshold:     0.2 # PE
   WidthTolerance:   0.5 # unitless
   TrigCoinc:        2.5 # in microseconds!
   AreaToPE:         false # Use area to calculate number of PEs
   SPEArea:          11.8  # If AreaToPE is true, this number is used as single PE area (in ADC counts)
   reco_man:         @local::standard_preco_manager
   algo_threshold:   @local::microboone_algo_slidingwindow
}

microboone_opflash_lowgain.algo_threshold.NumPreSample: 3
microboone_opflash_lowgain.algo_threshold.ADCThreshold: 8
microboone_opflash_lowgain.algo_threshold.NSigmaThreshold: 5
microboone_opflash_lowgain.algo_threshold.EndADCThreshold: 2
microboone_opflash_lowgain.algo_threshold.EndNSigmaThreshold: 1
microboone_opflash_lowgain.algo_threshold.MinWindowSize: 5
microboone_opflash_lowgain.algo_threshold.MaxSigma: 1.0

microboone_opflash_highgain:
{
   module_type:     "OpFlashFinder"
   GenModule:       "generator"
   InputModule:     "pmtreadout"
   InputLabels:     [ "" ]
   BinWidth:         1   # us | Pulse finding parameters
   FlashThreshold:   2   # PE
   HitThreshold:     0.2 # PE
   WidthTolerance:   0.5 # unitless
   TrigCoinc:        2.5 # in microseconds!
   AreaToPE:         true # Use area to calculate number of PEs
   SPEArea:          118  # If AreaToPE is true, this number is used as single PE area (in ADC counts)
   reco_man:         @local::standard_preco_manager
   algo_threshold:   @local::microboone_algo_slidingwindow
}

microboone_opflash_highgain.algo_threshold.NumPreSample: 3
microboone_opflash_highgain.algo_threshold.ADCThreshold: 8
microboone_opflash_lowgain.algo_threshold.EndADCThreshold: 3
microboone_opflash_lowgain.algo_threshold.EndNSigmaThreshold: 1
microboone_opflash_highgain.algo_threshold.NSigmaThreshold: 5
microboone_opflash_highgain.algo_threshold.MinWindowSize: 5
microboone_opflash_highgain.algo_threshold.MaxSigma: 1.0

microboone_opflash_beam_highgain: @local::microboone_opflash_highgain
microboone_opflash_beam_highgain.InputLabels:  ["OpdetBeamHighGain"]
microboone_opflash_beam_highgain.ChannelMasks: [ 32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47]

microboone_opflash_beam_lowgain: @local::microboone_opflash_lowgain
microboone_opflash_beam_lowgain.InputLabels:   ["OpdetBeamLowGain"]
microboone_opflash_beam_lowgain.ChannelMasks:  [ 132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147]

microboone_opflash_cosmic_highgain: @local::microboone_opflash_highgain
microboone_opflash_cosmic_highgain.InputLabels:  ["OpdetCosmicHighGain"]
microboone_opflash_cosmic_highgain.ChannelMasks: [ 232,  233,  234,  235,  236,  237,  238,  239,  240,  242,  242,  243,  244,  245,  246,  247]

microboone_opflash_cosmic_lowgain: @local::microboone_opflash_lowgain
microboone_opflash_cosmic_lowgain.InputLabels:  ["OpdetCosmicLowGain"]
microboone_opflash_cosmic_lowgain.ChannelMasks: [ 332,  333,  334,  335,  336,  337,  338,  339,  340,  342,  342,  343,  344,  345,  346,  347]

microboone_opflash: @local::microboone_opflash_beam_highgain

microboone_opdigiana:        @local::standard_opdigiana
microboone_opflashana:       @local::standard_opflashana

microboone_simphotoncounteralg: @local::standard_simphotoncounteralg
microboone_flashhypothesisanaalg: @local::standard_flashhypothesisanaalg
microboone_flashhypothesisanamodule: @local::standard_flashhypothesisanamodule

END_PROLOG
