#include "services_microboone.fcl"
#include "singles.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
##include "mccheatermodules.fcl"
##include "opticaldetectormodules.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices.fcl"
#include "lightsource.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "triggerenforcement.fcl"
#include "correct_saturation.fcl"
#include "ophitfindermodule.fcl"
#include "litemaker_opdata.fcl"

process_name: PBomb

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::microboone_simulation_services
#  @table::microboone_detsim_services
}
services.PhotonVisibilityService: @local::standard_photonvisibilityservice
#services.OpDigiProperties:        @local::microboone_opdigiproperties

services.PhotonVisibilityService.DoNotLoadLibrary: false 
#services.PhotonVisibilityService.DoNotLoadLibrary: true
#services.PhotonVisibilityService.LibraryBuildJob: false
services.PhotonVisibilityService.UseCryoBoundary: false 
services.PhotonVisibilityService.XMin: 20 
services.PhotonVisibilityService.XMax: 21 
services.PhotonVisibilityService.YMin: 0
services.PhotonVisibilityService.YMax: 1 
services.PhotonVisibilityService.ZMin: 500
services.PhotonVisibilityService.ZMax: 501

services.PhotonVisibilityService.NX: 1  
services.PhotonVisibilityService.NY: 1 
services.PhotonVisibilityService.NZ: 1 

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
  inputCommands: ["drop recob::Wires_*_*_*"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

   generator: @local::microboone_lightsource
   largeant:  @local::standard_largeant

#   optdigitizer:   @local::microboone_optical_adc_sim
#   optfem:         @local::microboone_optical_fem_sim

   optdigitizer:   @local::microboone_optical_adc_sim_singlep
   optfem:         @local::microboone_optical_fem_sim_singlep

   triggersim:     @local::ubtrigger_singlep

   pmtreadout:     @local::microboone_optical_dram_readout_sim

   opHit:   @local::microboone_ophit_beam_highgain
   opHitT:  @local::ophitfinder_microboone
   opHitSW: @local::ophitfinder_microboone
   opHitFW: @local::ophitfinder_microboone

   opFlash:       @local::microboone_opflash_beam_highgain
   simpleFlash:   { module_type : "SimpleFlashFinder" }
   simpleFlashT:  { module_type : "SimpleFlashFinder" }
   simpleFlashFW: { module_type : "SimpleFlashFinder" }
   simpleFlashSW: { module_type : "SimpleFlashFinder" }

   saturation:     @local::correct_saturation

   satOpHit:   @local::microboone_ophit_beam_highgain
   satOpHitT:  @local::ophitfinder_microboone
   satOpHitSW: @local::ophitfinder_microboone
   satOpHitFW: @local::ophitfinder_microboone

   satOpFlash:       @local::microboone_opflash_beam_highgain
   satSimpleFlash:   { module_type : "SimpleFlashFinder" }
   satSimpleFlashT:  { module_type : "SimpleFlashFinder" }
   satSimpleFlashFW: { module_type : "SimpleFlashFinder" }
   satSimpleFlashSW: { module_type : "SimpleFlashFinder" }

#                 CalibrationCorr : [1.014,1.024,1.013,1.003,1.014,0.993,1.004,0.957,0.939,0.981,0.918,0.960,0.953,0.937,1.005,0.964,
#                                    1.059,1.328,1.399,1.373,1.307,1.294,1.357,1.325,1.292,1.356,1.468,1.299,1.385,1.314,1.320,1.365] }
#   daq:       @local::microboone_simwire  
#   backtrack: @local::standard_backtrackerloader
#   opdigi:    @local::microboone_opdigi
#   rns:       {module_type: "RandomNumberSaver"}
 }

 analyzers:
 {
 #  largana:   @local::standard_largeantana
#   pmtresponse: @local::microboone_simphotoncounter
#   opdigiana: @local::microboone_opdigiana
   opdata: @local::litemaker_opdata
 }

 filters:
 {
  applyTrigger: @local::trigger_enforcement
 }

 simulate: [ generator, largeant, 
             optdigitizer, optfem, triggersim, applyTrigger, pmtreadout, 
             opHit, opHitT, opHitFW, opHitSW,
             opFlash, simpleFlash, simpleFlashT, simpleFlashFW, simpleFlashSW,
             saturation,
             satOpHit, satOpHitT, satOpHitFW, satOpHitSW,
             satOpFlash, satSimpleFlash, satSimpleFlashT, satSimpleFlashFW, satSimpleFlashSW ]
 analyzeIt:  [ opdata ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

# trigger_paths: [simulate] 

 end_paths:     [ stream1, analyzeIt ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "ahack_larsoft.root" #default file name, can override from command line with -o or --output
   outputCommands: ["keep *_*_*_*","drop simb::MCParticles_*_*_*"]
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
services.LArPropertiesService.ScintYield: 29000

# enable optical physics in LArG4
services.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "FastOptical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
services.LArPropertiesService.EnableCerenkovLight: false

physics.producers.generator.N: 29000
physics.producers.generator.T: 0
physics.producers.generator.SigmaT: 6
physics.producers.generator.TDist: 0

physics.producers.optdigitizer.G4StartTime: -3650.0e3
physics.producers.optdigitizer.Duration: 6.4e3

physics.filters.applyTrigger.TriggerProducer: "triggersim"

physics.producers.opHitT.OpDetWaveformProducer: "pmtreadout"
physics.producers.opHitT.UseArea: true
physics.producers.opHitT.SPESize: 118
physics.producers.opHitT.HitAlgoPset: @local::standard_algo_threshold

physics.producers.opHitFW.OpDetWaveformProducer: "pmtreadout"
physics.producers.opHitFW.UseArea: true
physics.producers.opHitFW.SPESize: 118
physics.producers.opHitFW.HitAlgoPset: @local::standard_algo_fixedwindow

physics.producers.opHitSW.OpDetWaveformProducer: "pmtreadout"
physics.producers.opHitT.Verbosity: false
physics.producers.opHitSW.UseArea: true
physics.producers.opHitSW.SPESize: 118
physics.producers.opHitSW.HitAlgoPset: @local::standard_algo_slidingwindow

physics.producers.simpleFlash.OpFlashProducer:   "opFlash"
physics.producers.simpleFlashT.OpFlashProducer:  "opHitT"
physics.producers.simpleFlashSW.OpFlashProducer: "opHitSW"
physics.producers.simpleFlashFW.OpFlashProducer: "opHitFW"

physics.producers.saturation.CalibrationCorr : [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] 

physics.producers.satOpHitT.OpDetWaveformProducer: "saturation"
physics.producers.satOpHitT.OpDetWaveformLabel: ""
physics.producers.satOpHitT.UseArea: true
physics.producers.satOpHitT.SPESize: 118
physics.producers.satOpHitT.HitAlgoPset: @local::standard_algo_threshold

physics.producers.satOpHitFW.OpDetWaveformProducer: "saturation"
physics.producers.satOpHitFW.OpDetWaveformLabel: ""
physics.producers.satOpHitFW.UseArea: true
physics.producers.satOpHitFW.SPESize: 118
physics.producers.satOpHitFW.HitAlgoPset: @local::standard_algo_fixedwindow

physics.producers.satOpHitSW.OpDetWaveformProducer: "saturation"
physics.producers.satOpHitSW.OpDetWaveformLabel: ""
physics.producers.satOpHitSW.UseArea: true
physics.producers.opHitT.Verbosity: false
physics.producers.satOpHitSW.SPESize: 118
physics.producers.satOpHitSW.HitAlgoPset: @local::standard_algo_slidingwindow

physics.producers.satOpHit.InputModule: "saturation"
physics.producers.satOpHit.InputLabels: [""]
physics.producers.satOpHit.ChannelMasks: [ 32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
                                           100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                                           110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
                                           120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
                                           130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
                                           140, 141, 142, 143, 144, 145, 146, 147 ]
physics.producers.satOpFlash.InputModule: "satOpHit"

physics.producers.satSimpleFlash.OpFlashProducer:   "satOpFlash"
physics.producers.satSimpleFlashT.OpFlashProducer:  "satOpHitT"
physics.producers.satSimpleFlashSW.OpFlashProducer: "satOpHitSW"
physics.producers.satSimpleFlashFW.OpFlashProducer: "satOpHitFW"

physics.analyzers.opdata.DataLookUpMap: {    
  mctruth:    ["generator"]
  simphotons: ["largeant"]
  trigger:    ["triggersim"]
  opdigit:    ["pmtreadout","saturation"]
  opflash:    ["opFlash","simpleFlash","simpleFlashT","simpleFlashFW","simpleFlashSW",
               "satOpFlash","satSimpleFlash","satSimpleFlashT","satSimpleFlashFW","satSimpleFlashSW"]
  ophit:      ["opHit","opHitT","opHitFW","opHitSW","satOpHit","satOpHitT","satOpHitFW","satOpHitSW"]
}

