//
// File generated by rootcint at Fri Oct  9 15:40:44 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictsubeventalgo
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "dictsubeventalgo.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void subeventcLcLSubEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_subeventcLcLSubEvent(void *p = 0);
   static void *newArray_subeventcLcLSubEvent(Long_t size, void *p);
   static void delete_subeventcLcLSubEvent(void *p);
   static void deleteArray_subeventcLcLSubEvent(void *p);
   static void destruct_subeventcLcLSubEvent(void *p);
   static void streamer_subeventcLcLSubEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::subevent::SubEvent*)
   {
      ::subevent::SubEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::subevent::SubEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("subevent::SubEvent", ::subevent::SubEvent::Class_Version(), "./SubEvent.hh", 10,
                  typeid(::subevent::SubEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::subevent::SubEvent::Dictionary, isa_proxy, 0,
                  sizeof(::subevent::SubEvent) );
      instance.SetNew(&new_subeventcLcLSubEvent);
      instance.SetNewArray(&newArray_subeventcLcLSubEvent);
      instance.SetDelete(&delete_subeventcLcLSubEvent);
      instance.SetDeleteArray(&deleteArray_subeventcLcLSubEvent);
      instance.SetDestructor(&destruct_subeventcLcLSubEvent);
      instance.SetStreamerFunc(&streamer_subeventcLcLSubEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::subevent::SubEvent*)
   {
      return GenerateInitInstanceLocal((::subevent::SubEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::subevent::SubEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void subeventcLcLSubEventList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_subeventcLcLSubEventList(void *p = 0);
   static void *newArray_subeventcLcLSubEventList(Long_t size, void *p);
   static void delete_subeventcLcLSubEventList(void *p);
   static void deleteArray_subeventcLcLSubEventList(void *p);
   static void destruct_subeventcLcLSubEventList(void *p);
   static void streamer_subeventcLcLSubEventList(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::subevent::SubEventList*)
   {
      ::subevent::SubEventList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::subevent::SubEventList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("subevent::SubEventList", ::subevent::SubEventList::Class_Version(), "./SubEventList.hh", 12,
                  typeid(::subevent::SubEventList), ::ROOT::DefineBehavior(ptr, ptr),
                  &::subevent::SubEventList::Dictionary, isa_proxy, 0,
                  sizeof(::subevent::SubEventList) );
      instance.SetNew(&new_subeventcLcLSubEventList);
      instance.SetNewArray(&newArray_subeventcLcLSubEventList);
      instance.SetDelete(&delete_subeventcLcLSubEventList);
      instance.SetDeleteArray(&deleteArray_subeventcLcLSubEventList);
      instance.SetDestructor(&destruct_subeventcLcLSubEventList);
      instance.SetStreamerFunc(&streamer_subeventcLcLSubEventList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::subevent::SubEventList*)
   {
      return GenerateInitInstanceLocal((::subevent::SubEventList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::subevent::SubEventList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace subevent {
//______________________________________________________________________________
atomic_TClass_ptr SubEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SubEvent::Class_Name()
{
   return "subevent::SubEvent";
}

//______________________________________________________________________________
const char *SubEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SubEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SubEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SubEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace subevent
      namespace subevent {
//______________________________________________________________________________
atomic_TClass_ptr SubEventList::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SubEventList::Class_Name()
{
   return "subevent::SubEventList";
}

//______________________________________________________________________________
const char *SubEventList::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEventList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SubEventList::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEventList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SubEventList::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEventList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SubEventList::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::subevent::SubEventList*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace subevent
      namespace subevent {
//______________________________________________________________________________
void SubEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class subevent::SubEvent.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::subevent::SubEvent thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tstart_sample;
      R__b >> tend_sample;
      R__b >> tstart_ns;
      R__b >> tend_ns;
      R__b >> maxamp;
      R__b >> totpe;
      R__b >> sumflash30;
      R__b >> sumfcomp_gausintegral;
      R__b.StreamObject(&(flashes),typeid(subevent::FlashList));
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tstart_sample;
      R__b << tend_sample;
      R__b << tstart_ns;
      R__b << tend_ns;
      R__b << maxamp;
      R__b << totpe;
      R__b << sumflash30;
      R__b << sumfcomp_gausintegral;
      R__b.StreamObject(&(flashes),typeid(subevent::FlashList));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace subevent
//______________________________________________________________________________
      namespace subevent {
void SubEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class subevent::SubEvent.
      TClass *R__cl = ::subevent::SubEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tstart_sample", &tstart_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tend_sample", &tend_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tstart_ns", &tstart_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tend_ns", &tend_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxamp", &maxamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totpe", &totpe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumflash30", &sumflash30);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumfcomp_gausintegral", &sumfcomp_gausintegral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flashes", (void*)&flashes);
      R__insp.InspectMember("subevent::FlashList", (void*)&flashes, "flashes.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace subevent
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_subeventcLcLSubEvent(void *p) {
      return  p ? new(p) ::subevent::SubEvent : new ::subevent::SubEvent;
   }
   static void *newArray_subeventcLcLSubEvent(Long_t nElements, void *p) {
      return p ? new(p) ::subevent::SubEvent[nElements] : new ::subevent::SubEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_subeventcLcLSubEvent(void *p) {
      delete ((::subevent::SubEvent*)p);
   }
   static void deleteArray_subeventcLcLSubEvent(void *p) {
      delete [] ((::subevent::SubEvent*)p);
   }
   static void destruct_subeventcLcLSubEvent(void *p) {
      typedef ::subevent::SubEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_subeventcLcLSubEvent(TBuffer &buf, void *obj) {
      ((::subevent::SubEvent*)obj)->::subevent::SubEvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::subevent::SubEvent

      namespace subevent {
//______________________________________________________________________________
void SubEventList::Streamer(TBuffer &R__b)
{
   // Stream an object of class subevent::SubEventList.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::subevent::SubEventList thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<SubEvent> &R__stl =  fSubEvents;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            subevent::SubEvent R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      void *ptr_sortMethod = (void*)&sortMethod;
      R__b >> *reinterpret_cast<Int_t*>(ptr_sortMethod);
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<SubEvent> &R__stl =  fSubEvents;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<SubEvent>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((subevent::SubEvent&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b << (Int_t)sortMethod;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace subevent
//______________________________________________________________________________
      namespace subevent {
void SubEventList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class subevent::SubEventList.
      TClass *R__cl = ::subevent::SubEventList::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSubEvents", (void*)&fSubEvents);
      R__insp.InspectMember("vector<SubEvent>", (void*)&fSubEvents, "fSubEvents.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortMethod", &sortMethod);
      TObject::ShowMembers(R__insp);
}

} // namespace subevent
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_subeventcLcLSubEventList(void *p) {
      return  p ? new(p) ::subevent::SubEventList : new ::subevent::SubEventList;
   }
   static void *newArray_subeventcLcLSubEventList(Long_t nElements, void *p) {
      return p ? new(p) ::subevent::SubEventList[nElements] : new ::subevent::SubEventList[nElements];
   }
   // Wrapper around operator delete
   static void delete_subeventcLcLSubEventList(void *p) {
      delete ((::subevent::SubEventList*)p);
   }
   static void deleteArray_subeventcLcLSubEventList(void *p) {
      delete [] ((::subevent::SubEventList*)p);
   }
   static void destruct_subeventcLcLSubEventList(void *p) {
      typedef ::subevent::SubEventList current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_subeventcLcLSubEventList(TBuffer &buf, void *obj) {
      ((::subevent::SubEventList*)obj)->::subevent::SubEventList::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::subevent::SubEventList

namespace ROOTDict {
   void vectorlEsubeventcLcLSubEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEsubeventcLcLSubEventgR_Dictionary();
   static void *new_vectorlEsubeventcLcLSubEventgR(void *p = 0);
   static void *newArray_vectorlEsubeventcLcLSubEventgR(Long_t size, void *p);
   static void delete_vectorlEsubeventcLcLSubEventgR(void *p);
   static void deleteArray_vectorlEsubeventcLcLSubEventgR(void *p);
   static void destruct_vectorlEsubeventcLcLSubEventgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<subevent::SubEvent>*)
   {
      vector<subevent::SubEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<subevent::SubEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<subevent::SubEvent>", -2, "prec_stl/vector", 49,
                  typeid(vector<subevent::SubEvent>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEsubeventcLcLSubEventgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<subevent::SubEvent>) );
      instance.SetNew(&new_vectorlEsubeventcLcLSubEventgR);
      instance.SetNewArray(&newArray_vectorlEsubeventcLcLSubEventgR);
      instance.SetDelete(&delete_vectorlEsubeventcLcLSubEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEsubeventcLcLSubEventgR);
      instance.SetDestructor(&destruct_vectorlEsubeventcLcLSubEventgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<subevent::SubEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<subevent::SubEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEsubeventcLcLSubEventgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<subevent::SubEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEsubeventcLcLSubEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<subevent::SubEvent> : new vector<subevent::SubEvent>;
   }
   static void *newArray_vectorlEsubeventcLcLSubEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<subevent::SubEvent>[nElements] : new vector<subevent::SubEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEsubeventcLcLSubEventgR(void *p) {
      delete ((vector<subevent::SubEvent>*)p);
   }
   static void deleteArray_vectorlEsubeventcLcLSubEventgR(void *p) {
      delete [] ((vector<subevent::SubEvent>*)p);
   }
   static void destruct_vectorlEsubeventcLcLSubEventgR(void *p) {
      typedef vector<subevent::SubEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<subevent::SubEvent>

/********************************************************
* dictsubeventalgo.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtabledictsubeventalgo();

extern "C" void G__set_cpp_environmentdictsubeventalgo() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("SubEvent.hh");
  G__add_compiledheader("SubEventList.hh");
  G__cpp_reset_tagtabledictsubeventalgo();
}
#include <new>
extern "C" int G__cpp_dllrevdictsubeventalgo() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* subevent::SubEvent */
static int G__dictsubeventalgo_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   subevent::SubEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new subevent::SubEvent[n];
     } else {
       p = new((void*) gvp) subevent::SubEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new subevent::SubEvent;
     } else {
       p = new((void*) gvp) subevent::SubEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) subevent::SubEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) subevent::SubEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      subevent::SubEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) subevent::SubEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) subevent::SubEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dictsubeventalgo_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   subevent::SubEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new subevent::SubEvent(*(subevent::SubEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef subevent::SubEvent G__TsubeventcLcLSubEvent;
static int G__dictsubeventalgo_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (subevent::SubEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((subevent::SubEvent*) (soff+(sizeof(subevent::SubEvent)*i)))->~G__TsubeventcLcLSubEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (subevent::SubEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((subevent::SubEvent*) (soff))->~G__TsubeventcLcLSubEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dictsubeventalgo_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   subevent::SubEvent* dest = (subevent::SubEvent*) G__getstructoffset();
   *dest = *(subevent::SubEvent*) libp->para[0].ref;
   const subevent::SubEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<subevent::SubEvent,allocator<subevent::SubEvent> > */
static int G__dictsubeventalgo_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reference obj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->at((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_reference obj = ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->at((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator* pobj;
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator xobj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->begin();
         pobj = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator* pobj;
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator xobj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->end();
         pobj = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator* pobj;
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator xobj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->rbegin();
         pobj = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator* pobj;
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator xobj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->rend();
         pobj = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->resize((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->resize((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]), *((subevent::SubEvent*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reference obj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->operator[]((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_reference obj = ((const vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->operator[]((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<subevent::SubEvent,allocator<subevent::SubEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >[n];
     } else {
       p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >;
     } else {
       p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<subevent::SubEvent,allocator<subevent::SubEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]), *(subevent::SubEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]), *(subevent::SubEvent*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<subevent::SubEvent,allocator<subevent::SubEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >(*(vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >(*(vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<subevent::SubEvent,allocator<subevent::SubEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<subevent::SubEvent,allocator<subevent::SubEvent> >(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<subevent::SubEvent,allocator<subevent::SubEvent> >& obj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->operator=(*(vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->reserve((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const subevent::SubEvent& obj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const subevent::SubEvent& obj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->push_back(*(subevent::SubEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->swap(*(vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator* pobj;
         vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator xobj = ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->insert(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[0])), *(subevent::SubEvent*) libp->para[1].ref);
         pobj = new vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->insert(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[0])), *((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[1]))
, *((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->insert(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[0])), (vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type) G__int(libp->para[1])
, *(subevent::SubEvent*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->erase(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->erase(*((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[0])), *((vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_178_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<subevent::SubEvent,allocator<subevent::SubEvent> > G__TvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR;
static int G__dictsubeventalgo_178_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) (soff+(sizeof(vector<subevent::SubEvent,allocator<subevent::SubEvent> >)*i)))->~G__TvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<subevent::SubEvent,allocator<subevent::SubEvent> >*) (soff))->~G__TvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* subevent::SubEventList */
static int G__dictsubeventalgo_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   subevent::SubEventList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new subevent::SubEventList[n];
     } else {
       p = new((void*) gvp) subevent::SubEventList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new subevent::SubEventList;
     } else {
       p = new((void*) gvp) subevent::SubEventList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const subevent::SubEvent& obj = ((subevent::SubEventList*) G__getstructoffset())->get((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         subevent::SubEventListIter* pobj;
         subevent::SubEventListIter xobj = ((subevent::SubEventList*) G__getstructoffset())->begin();
         pobj = new subevent::SubEventListIter(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         subevent::SubEventListIter* pobj;
         subevent::SubEventListIter xobj = ((subevent::SubEventList*) G__getstructoffset())->end();
         pobj = new subevent::SubEventListIter(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEventList*) G__getstructoffset())->sortByTime();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEventList*) G__getstructoffset())->sortByCharge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEventList*) G__getstructoffset())->sortByAmp();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((subevent::SubEventList*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEventList*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((subevent::SubEventList*) G__getstructoffset())->sortedByTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((subevent::SubEventList*) G__getstructoffset())->sortedByCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((subevent::SubEventList*) G__getstructoffset())->sortedByAmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) subevent::SubEventList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEventList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) subevent::SubEventList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      subevent::SubEventList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((subevent::SubEventList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEventList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) subevent::SubEventList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) subevent::SubEventList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictsubeventalgo_181_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) subevent::SubEventList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dictsubeventalgo_181_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   subevent::SubEventList* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new subevent::SubEventList(*(subevent::SubEventList*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef subevent::SubEventList G__TsubeventcLcLSubEventList;
static int G__dictsubeventalgo_181_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (subevent::SubEventList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((subevent::SubEventList*) (soff+(sizeof(subevent::SubEventList)*i)))->~G__TsubeventcLcLSubEventList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (subevent::SubEventList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((subevent::SubEventList*) (soff))->~G__TsubeventcLcLSubEventList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dictsubeventalgo_181_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   subevent::SubEventList* dest = (subevent::SubEventList*) G__getstructoffset();
   *dest = *(subevent::SubEventList*) libp->para[0].ref;
   const subevent::SubEventList& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* subevent::SubEvent */

/* vector<subevent::SubEvent,allocator<subevent::SubEvent> > */

/* subevent::SubEventList */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdictsubeventalgo {
 public:
  G__Sizep2memfuncdictsubeventalgo(): p(&G__Sizep2memfuncdictsubeventalgo::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdictsubeventalgo::*p)();
};

size_t G__get_sizep2memfuncdictsubeventalgo()
{
  G__Sizep2memfuncdictsubeventalgo a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedictsubeventalgo() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent))) {
     subevent::SubEvent *G__Lderived;
     G__Lderived=(subevent::SubEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),G__get_linked_tagnum(&G__dictsubeventalgoLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList))) {
     subevent::SubEventList *G__Lderived;
     G__Lderived=(subevent::SubEventList*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList),G__get_linked_tagnum(&G__dictsubeventalgoLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledictsubeventalgo() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Flash>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<subevent::Flash>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SubEvent>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),256,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),1,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent),257,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<subevent::SubEvent>",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SubEventListIter",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_subevent));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SortMethod_t",117,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),0,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* subevent::SubEvent */
static void G__setup_memvarsubeventcLcLSubEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent));
   { subevent::SubEvent *p; p=(subevent::SubEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tstart_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"tstart_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tend_sample)-(long)(p)),105,0,0,-1,-1,-1,1,"tend_sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tstart_ns)-(long)(p)),100,0,0,-1,-1,-1,1,"tstart_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tend_ns)-(long)(p)),100,0,0,-1,-1,-1,1,"tend_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxamp)-(long)(p)),100,0,0,-1,-1,-1,1,"maxamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totpe)-(long)(p)),100,0,0,-1,-1,-1,1,"totpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumflash30)-(long)(p)),100,0,0,-1,-1,-1,1,"sumflash30=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumfcomp_gausintegral)-(long)(p)),100,0,0,-1,-1,-1,1,"sumfcomp_gausintegral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flashes)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLFlashList),-1,-1,1,"flashes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<subevent::SubEvent,allocator<subevent::SubEvent> > */
static void G__setup_memvarvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   { vector<subevent::SubEvent,allocator<subevent::SubEvent> > *p; p=(vector<subevent::SubEvent,allocator<subevent::SubEvent> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* subevent::SubEventList */
static void G__setup_memvarsubeventcLcLSubEventList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList));
   { subevent::SubEventList *p; p=(subevent::SubEventList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR),G__defined_typename("vector<SubEvent>"),-1,2,"fSubEvents=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),-1,-2,2,"kUnsorted=-1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),-1,-2,2,"kByTime=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),-1,-2,2,"kByCharge=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),-1,-2,2,"kByAmp=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t),G__defined_typename("SortMethod_t"),-1,2,"sortMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardictsubeventalgo() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncsubeventcLcLSubEvent(void) {
   /* subevent::SubEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent));
   G__memfunc_setup("SubEvent",812,G__dictsubeventalgo_176_0_1, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dictsubeventalgo_176_0_2, 85, G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&subevent::SubEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dictsubeventalgo_176_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dictsubeventalgo_176_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&subevent::SubEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dictsubeventalgo_176_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&subevent::SubEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dictsubeventalgo_176_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dictsubeventalgo_176_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dictsubeventalgo_176_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&subevent::SubEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dictsubeventalgo_176_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dictsubeventalgo_176_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&subevent::SubEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SubEvent", 812, G__dictsubeventalgo_176_0_14, (int) ('i'), G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 0, 1, 1, 1, 0, "u 'subevent::SubEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SubEvent", 938, G__dictsubeventalgo_176_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dictsubeventalgo_176_0_16, (int) ('u'), G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 1, 1, 1, 1, 0, "u 'subevent::SubEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR(void) {
   /* vector<subevent::SubEvent,allocator<subevent::SubEvent> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR));
   G__memfunc_setup("at",213,G__dictsubeventalgo_178_0_1, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__dictsubeventalgo_178_0_2, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__dictsubeventalgo_178_0_3, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__dictsubeventalgo_178_0_4, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__dictsubeventalgo_178_0_5, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__dictsubeventalgo_178_0_6, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__dictsubeventalgo_178_0_7, 107, -1, G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__dictsubeventalgo_178_0_8, 107, -1, G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__dictsubeventalgo_178_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__dictsubeventalgo_178_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - sz u 'subevent::SubEvent' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__dictsubeventalgo_178_0_11, 107, -1, G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__dictsubeventalgo_178_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__dictsubeventalgo_178_0_13, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__dictsubeventalgo_178_0_14, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), G__defined_typename("vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<subevent::SubEvent,allocator<subevent::SubEvent> >",5548,G__dictsubeventalgo_178_0_15, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<subevent::SubEvent,allocator<subevent::SubEvent> >",5548,G__dictsubeventalgo_178_0_16, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n u 'subevent::SubEvent' - 11 'subevent::SubEvent()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<subevent::SubEvent,allocator<subevent::SubEvent> >",5548,G__dictsubeventalgo_178_0_17, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<subevent::SubEvent,allocator<subevent::SubEvent> >",5548,G__dictsubeventalgo_178_0_18, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator' 10 - first u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__dictsubeventalgo_178_0_19, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__dictsubeventalgo_178_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__dictsubeventalgo_178_0_21, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__dictsubeventalgo_178_0_22, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__dictsubeventalgo_178_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'subevent::SubEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__dictsubeventalgo_178_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__dictsubeventalgo_178_0_25, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - position u 'subevent::SubEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__dictsubeventalgo_178_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - position u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator' 10 - first "
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__dictsubeventalgo_178_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - position k - 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::size_type' 0 - n "
"u 'subevent::SubEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__dictsubeventalgo_178_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__dictsubeventalgo_178_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__dictsubeventalgo_178_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - first u 'vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__dictsubeventalgo_178_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<subevent::SubEvent,allocator<subevent::SubEvent> >", 5674, G__dictsubeventalgo_178_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsubeventcLcLSubEventList(void) {
   /* subevent::SubEventList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList));
   G__memfunc_setup("SubEventList",1224,G__dictsubeventalgo_181_0_1, 105, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__dictsubeventalgo_181_0_2, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEvent), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__dictsubeventalgo_181_0_3, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator), G__defined_typename("subevent::SubEventListIter"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__dictsubeventalgo_181_0_4, 117, G__get_linked_tagnum(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator), G__defined_typename("subevent::SubEventListIter"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortByTime",1042,G__dictsubeventalgo_181_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortByCharge",1229,G__dictsubeventalgo_181_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortByAmp",929,G__dictsubeventalgo_181_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__dictsubeventalgo_181_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__dictsubeventalgo_181_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortedByTime",1243,G__dictsubeventalgo_181_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortedByCharge",1430,G__dictsubeventalgo_181_0_11, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortedByAmp",1130,G__dictsubeventalgo_181_0_12, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compareTime",1142,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'subevent::SubEvent' - 1 - t1 u 'subevent::SubEvent' - 1 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compareArea",1120,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'subevent::SubEvent' - 1 - q1 u 'subevent::SubEvent' - 1 - q2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compareAmp",1029,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'subevent::SubEvent' - 1 - amp1 u 'subevent::SubEvent' - 1 - amp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dictsubeventalgo_181_0_16, 85, G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&subevent::SubEventList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dictsubeventalgo_181_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEventList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dictsubeventalgo_181_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&subevent::SubEventList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dictsubeventalgo_181_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&subevent::SubEventList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__dictsubeventalgoLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dictsubeventalgo_181_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dictsubeventalgo_181_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEventList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dictsubeventalgo_181_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&subevent::SubEventList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dictsubeventalgo_181_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&subevent::SubEventList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dictsubeventalgo_181_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&subevent::SubEventList::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SubEventList", 1224, G__dictsubeventalgo_181_0_28, (int) ('i'), G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList), -1, 0, 1, 1, 1, 0, "u 'subevent::SubEventList' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SubEventList", 1350, G__dictsubeventalgo_181_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dictsubeventalgo_181_0_30, (int) ('u'), G__get_linked_tagnum(&G__dictsubeventalgoLN_subeventcLcLSubEventList), -1, 1, 1, 1, 1, 0, "u 'subevent::SubEventList' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdictsubeventalgo() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldictsubeventalgo() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdictsubeventalgo() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dictsubeventalgoLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_subevent = { "subevent" , 110 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR = { "vector<subevent::Flash,allocator<subevent::Flash> >" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<subevent::Flash,allocator<subevent::Flash> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_subeventcLcLFlashList = { "subevent::FlashList" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_subeventcLcLSubEvent = { "subevent::SubEvent" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR = { "vector<subevent::SubEvent,allocator<subevent::SubEvent> >" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator = { "vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<subevent::SubEvent,allocator<subevent::SubEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_subeventcLcLSubEventList = { "subevent::SubEventList" , 99 , -1 };
G__linked_taginfo G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t = { "subevent::SubEventList::SortMethod_t" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledictsubeventalgo() {
  G__dictsubeventalgoLN_TClass.tagnum = -1 ;
  G__dictsubeventalgoLN_TBuffer.tagnum = -1 ;
  G__dictsubeventalgoLN_TMemberInspector.tagnum = -1 ;
  G__dictsubeventalgoLN_TObject.tagnum = -1 ;
  G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__dictsubeventalgoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__dictsubeventalgoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictsubeventalgoLN_subevent.tagnum = -1 ;
  G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR.tagnum = -1 ;
  G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictsubeventalgoLN_subeventcLcLFlashList.tagnum = -1 ;
  G__dictsubeventalgoLN_subeventcLcLSubEvent.tagnum = -1 ;
  G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR.tagnum = -1 ;
  G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator.tagnum = -1 ;
  G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictsubeventalgoLN_subeventcLcLSubEventList.tagnum = -1 ;
  G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledictsubeventalgo() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_TClass);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_TObject);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_subevent);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_vectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLFlashcOallocatorlEsubeventcLcLFlashgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_subeventcLcLFlashList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_subeventcLcLSubEvent),sizeof(subevent::SubEvent),-1,29952,(char*)NULL,G__setup_memvarsubeventcLcLSubEvent,G__setup_memfuncsubeventcLcLSubEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR),sizeof(vector<subevent::SubEvent,allocator<subevent::SubEvent> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR,G__setup_memfuncvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_vectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_reverse_iteratorlEvectorlEsubeventcLcLSubEventcOallocatorlEsubeventcLcLSubEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_subeventcLcLSubEventList),sizeof(subevent::SubEventList),-1,29952,(char*)NULL,G__setup_memvarsubeventcLcLSubEventList,G__setup_memfuncsubeventcLcLSubEventList);
   G__get_linked_tagnum_fwd(&G__dictsubeventalgoLN_subeventcLcLSubEventListcLcLSortMethod_t);
}
extern "C" void G__cpp_setupdictsubeventalgo(void) {
  G__check_setup_version(30051515,"G__cpp_setupdictsubeventalgo()");
  G__set_cpp_environmentdictsubeventalgo();
  G__cpp_setup_tagtabledictsubeventalgo();

  G__cpp_setup_inheritancedictsubeventalgo();

  G__cpp_setup_typetabledictsubeventalgo();

  G__cpp_setup_memvardictsubeventalgo();

  G__cpp_setup_memfuncdictsubeventalgo();
  G__cpp_setup_globaldictsubeventalgo();
  G__cpp_setup_funcdictsubeventalgo();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdictsubeventalgo();
  return;
}
class G__cpp_setup_initdictsubeventalgo {
  public:
    G__cpp_setup_initdictsubeventalgo() { G__add_setup_func("dictsubeventalgo",(G__incsetup)(&G__cpp_setupdictsubeventalgo)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdictsubeventalgo() { G__remove_setup_func("dictsubeventalgo"); }
};
G__cpp_setup_initdictsubeventalgo G__cpp_setup_initializerdictsubeventalgo;

