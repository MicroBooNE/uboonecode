#include "geometry_microboone.fcl"
#include "detectorclocks_microboone.fcl"
#include "pmtconfig_microboone.fcl"
#include "databaseutil_microboone.fcl"
#include "subevent_module.fcl"
process_name: SubEventBuilder
services:
{
  TFileService: { fileName: "raw_digits.root" }
  ExptGeoHelperInterface: @local::microboone_geometry_helper
  Geometry:               @local::microboone_geo
  DetectorClocksService:            @local::microboone_detectorclocks
  #DatabaseUtil:           @local::microboone_database
  UBOpReadoutMap:         @local::microboone_opreadoutmap
}

# Time Service
services.DetectorClocksService.TrigModuleName: "daq"

# Database settings
services.DatabaseUtil.DBHostName:    "fnalpgsdev.fnal.gov"
services.DatabaseUtil.DBName:        "uboonedaq_dev"
services.DatabaseUtil.DBUser:        "uboonedaq_web"
services.DatabaseUtil.Port:          5436
services.DatabaseUtil.PassFileName:  "uboonedb_passwd"  # name of password file. searched for using env var FW_SEARCH_PATH
services.DatabaseUtil.ToughErrorTreatment: true
services.DatabaseUtil.ShouldConnect: true
services.DatabaseUtil.TableName: "main_run"

outputs:
{
 out1:
  {
   module_type: RootOutput
   fileName:    "larsoft.root" 
   compressionLevel: 1
   #outputCommands: ["keep *_*_*_*",
   #                 "drop raw::OpDetWaveforms_*_*_*",
   #                 "drop raw::RawDigits_*_*_*",
   #                 "drop recob::Wires_*_*_*"]
  }
}

physics:
{
  producers:
  {
     subevents: @local::microboone_subeventbuilder
  }

 produceIt: [ subevents ]
 analyzeIt: []

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [ produceIt ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]
}


