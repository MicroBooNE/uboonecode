## 
##  Stage 1 Reconstruction
##
#include "services_microboone.fcl"
#include "flashfilter_microboone.fcl"
process_name: Michel

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "flash_filter.root" }
  TimeTracker:             {}
  MemoryTracker:           { ignoreTotal: 1 } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
                           @table::microboone_services_reco
}
services.DatabaseUtil.ShouldConnect: false

source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}
physics:
{

 producers:
 {}

 analyzers:
 {}

 filters:
 { flashtrigger : @local::microboone_flashtrigger }

 reco: [flashtrigger]

 stream1:  [ out1 ]

 trigger_paths: [reco]

 end_paths:     [stream1]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_reco1.root"
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
   outputCommands: ["keep *_*_*_*",
                    "drop raw::RawDigits_*_*_*",
                    "drop recob::Wires_*_*_*"]
 }
}

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}


