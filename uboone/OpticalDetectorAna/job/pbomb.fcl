#include "services_microboone.fcl"
#include "singles.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules.fcl"
##include "mccheatermodules.fcl"
##include "opticaldetectormodules.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices.fcl"
#include "lightsource.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "triggerenforcement.fcl"
#include "correct_saturation.fcl"
#include "ophitfindermodule.fcl"
#include "litemaker_opdata.fcl"

process_name: PBomb

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
#  user:         @local::microboone_detsim_services
}
services.user.PhotonVisibilityService: @local::standard_photonvisibilityservice
#services.user.OpDigiProperties:        @local::microboone_opdigiproperties

services.user.PhotonVisibilityService.DoNotLoadLibrary: false 
#services.user.PhotonVisibilityService.DoNotLoadLibrary: true
#services.user.PhotonVisibilityService.LibraryBuildJob: false
services.user.PhotonVisibilityService.UseCryoBoundary: false 
services.user.PhotonVisibilityService.XMin: 20 
services.user.PhotonVisibilityService.XMax: 21 
services.user.PhotonVisibilityService.YMin: 0
services.user.PhotonVisibilityService.YMax: 1 
services.user.PhotonVisibilityService.ZMin: 500
services.user.PhotonVisibilityService.ZMax: 501

services.user.PhotonVisibilityService.NX: 1  
services.user.PhotonVisibilityService.NY: 1 
services.user.PhotonVisibilityService.NZ: 1 

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
  inputCommands: ["drop recob::Wires_*_*_*"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

   generator: @local::microboone_lightsource
#   largeant:  @local::standard_largeant
   largeant:  @local::microboone_largeant

#   optdigitizer:   @local::microboone_optical_adc_sim
#   optfem:         @local::microboone_optical_fem_sim

   optdigitizer:   @local::microboone_optical_adc_sim_singlep
   optfem:         @local::microboone_optical_fem_sim_singlep

   triggersim:     @local::ubtrigger_singlep

   pmtreadout:     @local::microboone_optical_dram_readout_sim

   ### OpHit finders
   ophitT   : @local::ub_ophitfinder_t
   ophitFW  : @local::ub_ophitfinder_fw
   ophitSW  : @local::ub_ophitfinder_sw
   ophitCFD : @local::ub_ophitfinder_cfd

   ophitSatT   : @local::ub_ophitfinder_satt
   ophitSatFW  : @local::ub_ophitfinder_satfw
   ophitSatSW  : @local::ub_ophitfinder_satsw
   ophitSatCFD : @local::ub_ophitfinder_satcfd

   ### Saturation correction module
   saturation : @local::correct_saturation

   ### flash finders
   opflash          : @local::microboone_opflash_beam_highgain
   opflashLow       : @local::microboone_opflash_beam_lowgain
   opflashCosmic    : @local::microboone_opflash_cosmic_highgain
   opflashCosmicLow : @local::microboone_opflash_cosmic_lowgain

   sflashT   : @local::ub_sflash_t
   sflashFW  : @local::ub_sflash_fw
   sflashSW  : @local::ub_sflash_sw
   sflashCFD : @local::ub_sflash_cfd

   opflashSat   : @local::microboone_opflash_saturation

   sflashSatT   : @local::ub_sflash_satt
   sflashSatFW  : @local::ub_sflash_satfw
   sflashSatSW  : @local::ub_sflash_satsw
   sflashSatCFD : @local::ub_sflash_satcfd

#                 CalibrationCorr : [1.014,1.024,1.013,1.003,1.014,0.993,1.004,0.957,0.939,0.981,0.918,0.960,0.953,0.937,1.005,0.964,
#                                    1.059,1.328,1.399,1.373,1.307,1.294,1.357,1.325,1.292,1.356,1.468,1.299,1.385,1.314,1.320,1.365] }
#   daq:       @local::microboone_simwire  
#   backtrack: @local::standard_backtrackerloader
#   opdigi:    @local::microboone_opdigi
#   rns:       {module_type: "RandomNumberSaver"}
}

 analyzers:
 {
 #  largana:   @local::standard_largeantana
#   pmtresponse: @local::microboone_simphotoncounter
#   opdigiana: @local::microboone_opdigiana
   opdata: @local::litemaker_opdata
 }

 filters:
 {
  applyTrigger: @local::trigger_enforcement
 }

 simulate: [ generator, largeant, 
             optdigitizer, optfem, triggersim, applyTrigger, pmtreadout, 
             ophitT, ophitFW, ophitSW, ophitCFD,
             opflash, sflashT, sflashFW, sflashSW, sflashCFD,
             saturation,
             ophitSatT, ophitSatFW, ophitSatSW, ophitSatCFD,
             opflashSat, sflashSatT, sflashSatSW, sflashSatFW, sflashSatCFD]
 analyzeIt:  [ opdata ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

# trigger_paths: [simulate] 

 end_paths:     [ stream1, analyzeIt ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "ahack_larsoft.root" #default file name, can override from command line with -o or --output
   outputCommands: ["keep *_*_*_*","drop simb::MCParticles_*_*_*"]
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
services.user.LArProperties.ScintYield: 29000

# enable optical physics in LArG4
services.user.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "FastOptical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.user.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
services.user.LArProperties.EnableCerenkovLight: false

physics.producers.generator.N: 29000
physics.producers.generator.T: 0
physics.producers.generator.SigmaT: 6
physics.producers.generator.TDist: 0

physics.producers.optdigitizer.G4StartTime: -3650.0e3
physics.producers.optdigitizer.Duration: 6.4e3

physics.filters.applyTrigger.TriggerProducer: "triggersim"

physics.producers.saturation.CalibrationCorr : [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] 

physics.analyzers.opdata.DataLookUpMap: {    
  mctruth:    ["generator"]
  simphotons: ["largeant"]
  trigger:    ["triggersim"]
  opdigit:    ["pmtreadout","saturation"]
  opflash:    ["opflash","opflashSat",
               "sflashT","sflashFW","sflashSW","sflashCFD",
               "sflashSatT","sflashSatFW","sflashSatSW","sflashSatCFD"]
  ophit:      ["opflash","opflashSat",
               "ophitT","ophitSW","ophitFW","ophitCFD",
               "ophitSatT","ophitSatSW","ophitSatFW","ophitSatCFD"]
}

