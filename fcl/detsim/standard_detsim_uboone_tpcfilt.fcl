#include "services_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "signalservices_microboone.fcl"
###include "mccheatermodules.fcl"
###include "filters.fcl"


process_name: Detsim

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "detsim_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
#  BackTracker:          @local::microboone_backtracker
  user:         @local::microboone_detsim_services
#  user:         @local::microboone_detsimbt_services
}
services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.user.FileCatalogMetadataExtras:  @local::microboone_file_catalog
services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
                                                    "fileFormat", "root",
                                                    "runType",    "physics",
                                                    "fclName",    "standard_detsim_uboone.fcl",
                                                    "fclVersion", "v1_5",
                                                    "ubProjectStage",   "detsim",
                                                    "ubProjectVersion", "v1_3" ]

services.user.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_detsim.root"
services.user.BackTracker:                    @local::microboone_backtracker  

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   optdigitizer:   @local::microboone_optical_adc_sim
   optfem:         @local::microboone_optical_fem_sim
   triggersim:     @local::ubtrigger_standard
   optreadout:     @local::microboone_optical_dram_readout_sim
   daq:            @local::microboone_simwire
##   backtrack:	   @local::standard_backtrackerloader
   rns:            { module_type: "RandomNumberSaver" }
 }

filters : 
{
    filtDirtNus: {
     module_type: FilterNoDirtNeutrinos
     GenModuleLabel: "generator"
    }
}
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below

 simulate: [filtDirtNus, optdigitizer, optfem, triggersim, optreadout, daq, rns]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}



#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_detsim_uboone.root"
   SelectEvents: { SelectEvents: [ simulate ] }
   dataTier:    "detector-simulated"
 }
}

