#include "services_microboone.fcl"
#include "genie_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices_microboone.fcl"
#include "correct_saturation.fcl"
#include "caldata_microboone.fcl" 
#include "time_memory_tracker_microboone.fcl"
#include "deeplearn_swtrigger.fcl"
#include "litemc_mcinfo.fcl"
#include "litemc_simch.fcl"
#include "litemc_wire.fcl"
#include "litemc_opreco.fcl"
#include "litemc_opdigit.fcl"

process_name: MCC2LL

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "mc_hist.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator                                                                                          
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
  LLMetaMaker: {Enable: true}
  @table::microboone_simulation_services
}

services.FileCatalogMetadata.applicationVersion: "develop"
services.FileCatalogMetadata.fileType: "mc"
services.FileCatalogMetadata.runType: "physics"
services.FileCatalogMetadataMicroBooNE: {
  FCLName: "run_larlite_maker_mc.fcl"
  FCLVersion: "develop"
  ProjectName: "LiteMC"
  ProjectStage: "LiteMaker"
  ProjectVersion: "develop"
}

services.SignalShapingServiceMicroBooNE.StretchFullResponse: true
services.SignalShapingServiceMicroBooNE.NConfigs:            2
services.SignalShapingServiceMicroBooNE.FilterFuncVec:  [ "(x>0.0)*gaus", "(x>0.0)*gaus", "(x>0.0)*gaus" ]
services.SignalShapingServiceMicroBooNE.FilterParamsVec:   [ [ 1.0, 0.0, 0.1 ], [ 1.0, 0.0, 0.1 ], [ 1.0, 0.0, 0.1 ] ]
services.SignalShapingServiceMicroBooNE.FilterWidthCorrectionFactor: [ 0.738, 0.738, 0.738 ]

services.TimeTracker.printSummary: false
services.TimeTracker.dbOutput: {}

services.MemoryTracker.printSummaries: []
services.MemoryTracker.includeMallocInfo: false
services.MemoryTracker.filename: ""

source:
{
  module_type: RootInput
}

physics:
{

 producers: {}

 analyzers:
 {
   mcinfo:  @local::litemc_mcinfo
   simch:   @local::litemc_simch

   wire:    @local::litemc_wire
   opdigit: @local::litemc_opdigit
   opreco:  @local::litemc_opreco
 }

 ana: [ opdigit, opreco ]
 
 stream1:  []

 trigger_paths: []

 end_paths:     [ana]
}

physics.analyzers.mcinfo.stream:      "mcinfo"
physics.analyzers.simch.stream:       "simch"
physics.analyzers.wire.stream:        "wire"
physics.analyzers.opdigit.stream:     "opdigit"
physics.analyzers.opreco.stream:      "opreco"

physics.analyzers.mcinfo.out_filename:      "larlite_mcinfo.root"
physics.analyzers.simch.out_filename:       "larlite_simch.root"
physics.analyzers.wire.out_filename:        "larlite_wire.root"
physics.analyzers.opdigit.out_filename:     "larlite_opdigit.root"
physics.analyzers.opreco.out_filename:      "larlite_opreco.root"

physics.analyzers.opreco.DataLookUpMap.ophit: ["ophit","ophitSat"]
physics.analyzers.opreco.DataLookUpMap.opflash: ["opflash","opflashSat"]

physics.analyzers.opreco.AssociationLookUpMap.ophit: ["ophit","ophitSat"]
physics.analyzers.opreco.AssociationLookUpMap.opflash: ["opflash","opflashSat"]

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
 }
}

