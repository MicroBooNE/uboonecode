#include "services_microboone.fcl"
#include "opcalibration_microboone.fcl"

process_name: SPEcalibration

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  message:      @local::standard_warning
  TFileService: { fileName: "SPEcalibration_output.root" }
  FileCatalogMetadata:  @local::art_file_catalog_data
  DatabaseUtil:         @local::microboone_database
  DetectorClocksService:            @local::microboone_detectorclocks
  UBOpReadoutMap:         @local::microboone_opreadoutmap
}

microboone_tfile_metadata:
{
  JSONFileName:          "SPEcalibration_output.root.json"
  GenerateTFileMetadata: true
  dataTier:              "root-tuple"
  fileFormat:            "root"
}

services.DatabaseUtil.DBHostName:    "ifdbprod2.fnal.gov"
services.DatabaseUtil.DBName:        "hootgibson_prod"
services.DatabaseUtil.DBUser:        "uboonedaq_web"
services.DatabaseUtil.Port:          5444
services.DatabaseUtil.PassFileName:  "uboonedb_passwd"  # name of password file. searched for using env var FW_SEARCH_PATH
services.DatabaseUtil.ToughErrorTreatment: false
services.DatabaseUtil.ShouldConnect: true
services.DatabaseUtil.TableName: "main_run"

source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

physics:
{

 analyzers:
 {
   specalib: @local::microboone_SPEcalibration
 }

 # Path for analyzer modules.
 ana: [ specalib ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ outnotpc ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana, stream1 ]  
}

outputs:
{
 outnotpc:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_merged.root"
   dataTier:    "raw"
   streamName:  "outnotpc"
   compressionLevel: 3
 }
}
