#include "services_microboone.fcl"
#include "largeantmodules_microboone.fcl"

process_name: G4

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "g4_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_g4_services
}
services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"
services.user.LArG4Parameters.UseModBoxRecomb:          true
services.user.FileCatalogMetadataExtras:  @local::microboone_file_catalog
services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
                                                    "fileFormat", "root",
                                                    "runType",    "physics",
                                                    "fclName",    "standard_g4_3window_uboone.fcl",
                                                    "fclVersion", "v1_5",
                                                    "ubProjectStage",   "g4",
                                                    "ubProjectVersion", "v1_3" ]

services.user.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_g4.root"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   largeant:  @local::microboone_largeant
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ largeant, rns ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_g4_uboone.root"
   dataTier:    "simulated"
 }
}
