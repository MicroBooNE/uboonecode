## 
##  Stage 1 Reconstruction
##
#include "services_microboone.fcl"
#include "calibration_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "trackfindermodules_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "pandoramodules_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "cosmicremovalmodules.fcl"
#include "mchitmodules.fcl"
#include "mcreco.fcl"

process_name: RecoDataStage1

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "reco_stage_1_hist.root" }
  TimeTracker:             {}
  MemoryTracker:           { ignoreTotal: 1 } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_data
  PhotonVisibilityService: @local::microboone_photonvisibilityservice
                           @table::microboone_services_reco
}
services.DatabaseUtil.ShouldConnect: false

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

  ### filter out the RawDigit noise
  # -- old version -- digitfilter:            @local::microboone_rawdigitfilter
  
  ### Noise filter does not really work, use rawdigitfilter
  digitfilter:         @local::microboone_rawdigitfilter
  # digitfilter:         @local::microboone_noisefilter
  
  ### flash finders
  ophit:               @local::microboone_ophit
  opflash:             @local::microboone_opflash

  ### calwire producers
  caldata:             @local::microboone_calroi
  calWireInvert:       @local::microboone_calWireInvert

  ### hit-finder producers
  gaushit:             @local::microboone_gaushitfinder
  cchit:               @local::microboone_clustercrawlerhit
  invertedHits:        @local::microboone_gaushitfinder

  ### cluster-finder producers
  fuzzycluster:        @local::microboone_fuzzycluster
  fuzzyclustermerger:  @local::microboone_fuzzyclustermerger
  cccluster:           @local::microboone_clustercrawler
  linecluster:         @local::microboone_linecluster
  cctrack:             @local::microboone_cctrackmaker
  cluster3d:           @local::microboone_cluster3d
  
  ### cosmic tagger for cluster3d
  cluster3dpcatag:     @local::microboone_cosmicpcaxistagger

  ### pandora cosmic pass
  pandoraCosmic:       @local::microboone_pandora
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns,
         digitfilter,
         ophit,
         opflash,
         caldata,
	     calWireInvert,
         gaushit,
	     invertedHits,
	     cchit,
         fuzzycluster, fuzzyclustermerger, linecluster, cluster3d,
         cctrack,
         pandoraCosmic,
         cluster3dpcatag
         ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_reco1.root"
   sam_ignore:  true
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

### Here we include the file giving us run/data dependent overrides
#include "uboone_data_runSettings.fcl"

### Here, we overwrite ALL module labels with the ones defined above.

# These were the settings for the old RawDigitFilter
physics.producers.digitfilter.TruncMeanFraction:                0.1
physics.producers.digitfilter.NumWiresToGroup:                  [48, 48, 96]

physics.producers.ophit.InputModule:                            "optreadout"
physics.producers.ophit.GenModule:                              "generator"
physics.producers.ophit.InputLabels:                          [ "OpdetBeamHighGain",   "OpdetBeamLowGain",
                                                                "OpdetCosmicHighGain", "OpdetCosmicLowGain"]
physics.producers.opflash.InputModule:                          "ophit"
								
physics.producers.caldata.DigitModuleLabel:                     "digitfilter"
physics.producers.caldata.MaxAllowedChannelStatus:              1

#physics.producers.caldata.DoBaselineSub:                         false
#physics.producers.caldata.DoBaselineSub_WaveformPropertiesAlg:   true

physics.producers.calWireInvert.DigitModuleLabel:               "digitfilter"

physics.producers.gaushit.CalDataModuleLabel:                    "caldata"
physics.producers.gaushit.MinSig:                                [ 8.0,    8.0,   8.0]

physics.producers.invertedHits.CalDataModuleLabel:               "calWireInvert"
physics.producers.invertedHits.MinSig:                           [8.0, 8.0, 8.0]

physics.producers.cchit.CCHitFinderAlg.MaxBumps:                 2
physics.producers.cchit.CCHitFinderAlg.MinSigInd:                5
physics.producers.cchit.CCHitFinderAlg.MinRMSInd:                2
physics.producers.cchit.CCHitFinderAlg.MinSigCol:                5
physics.producers.cchit.CCHitFinderAlg.MinRMSCol:                2
physics.producers.cchit.CCHitFinderAlg.ChiSplit:                 100
physics.producers.cchit.CCHitFinderAlg.MaxXtraHits:              0

physics.producers.linecluster.CCHitFinderAlg.MaxBumps:           2
physics.producers.linecluster.CCHitFinderAlg.MinSigInd:          5
physics.producers.linecluster.CCHitFinderAlg.MinRMSInd:          2
physics.producers.linecluster.CCHitFinderAlg.MinSigCol:          5
physics.producers.linecluster.CCHitFinderAlg.MinRMSCol:          2
physics.producers.linecluster.CCHitFinderAlg.ChiSplit:           100
physics.producers.linecluster.CCHitFinderAlg.MaxXtraHits:        0

physics.producers.fuzzycluster.HitsModuleLabel:                  "gaushit"
physics.producers.fuzzycluster.CalDataModuleLabel:               "caldata"

physics.producers.cccluster.CalDataModuleLabel:                  "caldata"
physics.producers.cccluster.CCHitFinderAlg.CalDataModuleLabel:   "caldata"

physics.producers.cctrack.HitModuleLabel:                        "linecluster"
physics.producers.cctrack.ClusterModuleLabel:                    "linecluster"
physics.producers.cctrack.VertexModuleLabel:                     "linecluster"

physics.producers.pandoraCosmic.GeantModuleLabel:                "largeant"
physics.producers.pandoraCosmic.HitFinderModuleLabel:            "gaushit"
physics.producers.pandoraCosmic.ConfigFile:                      "PandoraSettings_MicroBooNE_Cosmic.xml"

physics.producers.cluster3dpcatag.PFParticleModuleLabel:         "cluster3d"
physics.producers.cluster3dpcatag.PCAxisModuleLabel:             "cluster3d"
physics.producers.cluster3dpcatag.TPCXBoundary:                  10
physics.producers.cluster3dpcatag.TPCYBoundary:                  10
physics.producers.cluster3dpcatag.TPCZBoundary:                  10

# Set the shaping time 
services.SignalShapingServiceMicroBooNE.ShapeTimeConst: [2.0, 2.0, 2.0]




### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}


