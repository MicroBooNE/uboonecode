#include "services_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "clustermodules.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "vertexfindermodules.fcl"
#include "pandoramodules.fcl"
#include "triggeralgo_service.fcl"

process_name: Reco2D

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco2D_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  MemoryPeakReporter:    {}
  message:      @local::microboone_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_services
}
services.FileCatalogMetadata.applicationVersion:  "S2013.06.25"

services.user.PhotonVisibilityService: @local::microboone_photonvisibilityservice

services.user.DatabaseUtil.ShouldConnect: false

services.user.FileCatalogMetadataExtras:  @local::microboone_file_catalog
services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
                                                    "fileFormat", "root",
                                                    "fclName",    "standard_reco_uboone_2D.fcl",
                                                    "fclVersion", "v1_5",
                                                    "ubProjectStage",   "reco2D",
                                                    "ubProjectVersion", "v1_3" ]
services.user.FileCatalogMetadataExtras.RenameTemplate: "${base .root}_${CLUSTER 0}_${PROCESS 0}_reco2D.root"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

  ### flash finders
  opflash:             @local::microboone_opflash

  ### calwire producers
  caldata:             @local::microboone_calroi

  ### hit-finder producers
  gaushit:             @local::microboone_gaushitfinder
  rffhit:              @local::microboone_rffhitfinder

  ### corner-finder
  corner:              @local::standard_cornerfinder    

  ### cluster-finder producers
  fuzzycluster:        @local::microboone_fuzzycluster
  cccluster:           @local::microboone_clustercrawler

  ### pandora
  pandora:             @local::standard_pandora

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns,
         opflash,
         caldata, 
         gaushit, rffhit,
         fuzzycluster, cccluster, 
         pandora ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "standard_reco_uboone_2D.root"
   dataTier:    "reconstructed-2d"
 }
}


### Here, we overwrite ALL module labels with the ones defined above.

physics.producers.opflash.InputModule:                          "optreadout"
physics.producers.opflash.GenModule:                            "generator"

physics.producers.caldata.DigitModuleLabel:                     "daq"

physics.producers.gaushit.CalDataModuleLabel:                   "caldata"
physics.producers.rffhit.CalDataModuleLabel:                    "caldata"

#physics.producers.corner.CornerAlgParamSet.RawDataModuleLabel:  "daq"
#physics.producers.corner.CornerAlgParamSet.CalDataModuleLabel:  "caldata"

physics.producers.fuzzycluster.HitsModuleLabel:                 "gaushit"
physics.producers.fuzzycluster.CalDataModuleLabel:              "caldata"

physics.producers.cccluster.CalDataModuleLabel:                 "caldata"
physics.producers.cccluster.CCHitFinderAlg.CalDataModuleLabel:  "caldata"

physics.producers.pandora.GeantModuleLabel:                     "largeant"
physics.producers.pandora.HitFinderModuleLabel:                 "gaushit"



