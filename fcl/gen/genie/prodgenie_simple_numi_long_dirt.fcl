#include "services_microboone.fcl"
#include "genie_microboone_numi_simple.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"

process_name: GenieGen
# lar -c prodgenie_simple_numi_bott.fcl 

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_simulation_services
}
services.FileCatalogMetadata.applicationVersion:  "S2013.12.17"

# Turn off Box recombo in LArG4
services.user.LArG4Parameters.UseModBoxRecomb:          false

# This entry should be copied to derived fcl files to override fclName.
services.user.FileCatalogMetadataExtras:  @local::microboone_file_catalog
services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "uboone",
                                                    "fileFormat", "root",
                                                    "runType",    "physics",
                                                    "fclName",    "prodgenie_common_uboone.fcl",
                                                    "fclVersion", "v1_5",
                                                    "ubProjectStage",   "gen",
                                                    "ubProjectVersion", "v1_3" ]


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   5           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
   generator: @local::microboone_genie_simple_numi_long_dirt
   largeant:  @local::microboone_largeant
   rns:       { module_type: "RandomNumberSaver" }
 }
 simulate: [ generator, largeant, rns ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simulate ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "long_dirt_genie_gen.root"
   dataTier:    "generated"
 }
}


physics.producers.generator.GlobalTimeOffset: 0.
physics.producers.generator.RandomTimeOffset: 0.
physics.producers.generator.TopVolume: "volWorld"

#physics.producers.generator:                @local::microboone_genie_numi
#physics.producers.generator.FluxType:       "simple_flux"
#physics.producers.generator.FluxFiles:      ["numi_gsimple_fluxes_02.27.2014/bottom_window/*.root"]
