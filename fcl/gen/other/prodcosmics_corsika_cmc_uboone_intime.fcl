#include "services_microboone.fcl"
#include "corsika_microboone.fcl"
#include "FilterGenInTime_module.fcl"

process_name: CosmicsCorsikaCMCGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "cosmics_corsika_cmc_hist.root" }
  TimeTracker: { 
    printSummary : true
    dbOutput     : {
      filename   :  "time.db"
      overwrite  :  true
    }
  }
  MemoryTracker: {
    ignoreTotal       : 1 # no. of events to exclude - '1' by default
    printSummaries    : ["*"] # or any combination of ["general","event","module"]
    includeMallocInfo : true
    filename          : "mem.db" 
  }
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_corsika_cmc
   rns:       { module_type: "RandomNumberSaver" }
 }
 
 filters:       { GenInTimeFilter : @local::microboone_FilterGenInTime}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below 
 simulate: [ rns, generator, GenInTimeFilter] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "prodcosmics_corsika_cmc_uboone_%tc_gen_intime.root"
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: { SelectEvents: [ simulate ] }
 }
}



