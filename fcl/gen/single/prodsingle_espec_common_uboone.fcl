#include "services_microboone_simulation.fcl"
#include "largeantmodules_microboone.fcl"

BEGIN_PROLOG

toyoneshowergen:
{
  module_type: "ToyOneShowerGen"

  PDGCode: 11
  Time:    0

  MomentumShapeFormula:    "TMath::Landau(x,[0],[1],0)"
  MomentumLowerBound:      0.1
  MomentumUpperBound:      1.0
  MomentumShapeParameters: [ 0.3, 0.1 ]

  ThetaShapeFormula:    "TMath::Landau(x,[0],[1],0)"
  ThetaLowerBound:      0.0
  ThetaUpperBound:      3.14159
  ThetaShapeParameters: [ 0.5, 0.2 ]
}

END_PROLOG

process_name: SinglesGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_espec_hist_uboone.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{

 producers:
 {
   generator:    @local::toyoneshowergen
   rns:          { module_type: "RandomNumberSaver" }
 }
 
 simulate: [ rns, generator ]

 stream1:  [ out1 ]

 trigger_paths: [simulate] 

 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_espec_gen_uboone.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

